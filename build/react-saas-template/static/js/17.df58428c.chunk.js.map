{"version":3,"sources":["universalComponents/ImageCroppr.js"],"names":["ImageCroppr","crop","onCrop","_this","props","cropper","getCroppedCanvas","toDataURL","setCropFunction","this","_this2","_this$props","classes","src","aspectRatio","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","cropperWrapper","react_cropper__WEBPACK_IMPORTED_MODULE_6___default","ref","element","guides","zoomable","viewMode","cropmove","cropBoxData","getCropBoxData","cropBoxWidth","width","aspRatio","height","setCropBoxData","PureComponent","withStyles","& img","maxWidth"],"mappings":"uMAiBMA,6MAMJC,KAAO,YAELC,EADmBC,EAAKC,MAAhBF,QACDC,EAAKE,QAAQC,mBAAmBC,kGALvCC,EAD4BC,KAAKL,MAAzBI,iBACQC,KAAKR,uCAQd,IAAAS,EAAAD,KAAAE,EAC+BF,KAAKL,MAAnCQ,EADDD,EACCC,QAASC,EADVF,EACUE,IAAKC,EADfH,EACeG,YACtB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAQO,gBACtBJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEK,IAAK,SAAAC,GACHZ,EAAKL,QAAUiB,GAEjBT,IAAKA,EAELU,QAAQ,EACRC,UAAU,EACVC,SAAU,EACVX,YAAaA,EACbY,SAMEZ,EACI,KACA,WACE,IAAMa,EAAcjB,EAAKL,QAAQuB,iBAC3BC,EAAeF,EAAYG,MAC3BC,EAAWF,EAAeF,EAAYK,OACxCD,EAAW,EACbrB,EAAKL,QAAQ4B,eAAe,CAC1BD,OAAQH,EAAe,IAEhBE,EAAW,GAAK,GACzBrB,EAAKL,QAAQ4B,eAAe,CAC1BD,OAAQH,GAAgB,GAAK,gBA3CzBK,iBA8DXC,sBAxEA,CACbhB,eAAgB,CACdiB,QAAS,CACPJ,OAAQ,OACRF,MAAO,OACPO,SAAU,UAmEDF,CAAmBnC","file":"static/js/17.df58428c.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Cropper from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n\r\nconst styles = {\r\n  cropperWrapper: {\r\n    \"& img\": {\r\n      height: \"auto\",\r\n      width: \"100%\",\r\n      maxWidth: \"100%\"\r\n    }\r\n  }\r\n};\r\n\r\nclass ImageCroppr extends PureComponent {\r\n  componentDidMount() {\r\n    const { setCropFunction } = this.props;\r\n    setCropFunction(this.crop);\r\n  }\r\n\r\n  crop = () => {\r\n    const { onCrop } = this.props;\r\n    onCrop(this.cropper.getCroppedCanvas().toDataURL());\r\n  };\r\n\r\n  render() {\r\n    const { classes, src, aspectRatio } = this.props;\r\n    return (\r\n      <div className={classes.cropperWrapper}>\r\n        <Cropper\r\n          ref={element => {\r\n            this.cropper = element;\r\n          }}\r\n          src={src}\r\n          // Cropper.js options\r\n          guides={false}\r\n          zoomable={false}\r\n          viewMode={3}\r\n          aspectRatio={aspectRatio}\r\n          cropmove={\r\n            /**\r\n             * If a fixed aspect ratio is set(Story) we will use it,\r\n             * otherwise (Picture) we will use this function to get a picture\r\n             * between 1:1 and 16/9 (still have to find out).\r\n             */\r\n            aspectRatio\r\n              ? null\r\n              : () => {\r\n                  const cropBoxData = this.cropper.getCropBoxData();\r\n                  const cropBoxWidth = cropBoxData.width;\r\n                  const aspRatio = cropBoxWidth / cropBoxData.height;\r\n                  if (aspRatio < 1) {\r\n                    this.cropper.setCropBoxData({\r\n                      height: cropBoxWidth / 1\r\n                    });\r\n                  } else if (aspRatio > 16 / 9) {\r\n                    this.cropper.setCropBoxData({\r\n                      height: cropBoxWidth / (16 / 9)\r\n                    });\r\n                  }\r\n                }\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nImageCroppr.propTypes = {\r\n  classes: PropTypes.object,\r\n  src: PropTypes.string,\r\n  onCrop: PropTypes.func,\r\n  setCropFunction: PropTypes.func,\r\n  aspectRatio: PropTypes.number\r\n};\r\n\r\nexport default withStyles(styles)(ImageCroppr);\r\n"],"sourceRoot":""}