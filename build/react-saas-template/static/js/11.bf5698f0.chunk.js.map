{"version":3,"sources":["../node_modules/react-cropper/dist/react-cropper.js","../node_modules/react-cropper/node_modules/cropperjs/dist/cropper.js"],"names":["Object","defineProperty","exports","value","default","_react","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","desc","getOwnPropertyDescriptor","get","set","_interopRequireWildcard","__webpack_require__","_propTypes","_interopRequireDefault","_cropperjs","_typeof","Symbol","iterator","constructor","_extends","assign","target","i","arguments","length","source","apply","this","_defineProperties","props","descriptor","enumerable","configurable","writable","_possibleConstructorReturn","self","ReferenceError","_assertThisInitialized","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","p","optionProps","unchangeableProps","slice","ReactCropper","_Component","instance","Constructor","TypeError","_classCallCheck","protoProps","staticProps","subClass","superClass","create","_inherits","Component","_this","options","keys","filter","propKey","indexOf","reduce","prevOptions","cropper","img","nextProps","_this2","src","reset","clear","replace","aspectRatio","setAspectRatio","data","setData","dragMode","setDragMode","cropBoxData","setCropBoxData","canvasData","setCanvasData","moveTo","zoomTo","rotateTo","scaleX","scaleY","enable","disable","forEach","isDifferentVal","isUnchangeableProps","toString","Error","concat","destroy","mode","getCroppedCanvas","getCropBoxData","getCanvasData","getImageData","getContainerData","rounded","getData","crop","offsetX","offsetY","move","x","y","ratio","zoom","degree","rotate","url","onlyColorChanged","scale","_scaleX","_scaleY","_this3","_this$props","alt","crossOrigin","style","className","createElement","ref","undefined","opacity","propTypes","object","string","number","oneOf","shape","width","height","bool","left","top","arrayOf","viewMode","preview","responsive","restore","checkCrossOrigin","checkOrientation","modal","guides","center","highlight","background","autoCrop","autoCropArea","movable","rotatable","scalable","zoomable","zoomOnTouch","zoomOnWheel","wheelZoomRatio","cropBoxMovable","cropBoxResizable","toggleDragModeOnDblclick","minContainerWidth","minContainerHeight","minCanvasWidth","minCanvasHeight","minCropBoxWidth","minCropBoxHeight","ready","func","cropstart","cropmove","cropend","defaultProps","_default","module","DEFAULTS","NaN","classCallCheck","createClass","defineProperties","REGEXP_DATA_URL_HEAD","REGEXP_HYPHENATE","REGEXP_ORIGINS","REGEXP_SPACES","REGEXP_SUFFIX","REGEXP_TRIM","navigator","window","IS_SAFARI_OR_UIWEBVIEW","test","userAgent","objectProto","fromCharCode","Array","String","typeOf","toLowerCase","isNumber","num","isNaN","isUndefined","isObject","isPlainObject","_constructor","e","isFunction","fn","trim","str","each","callback","arr","isArray","extend","_len","args","_key","arg","proxy","context","_len2","_key2","_len3","args2","_key3","setStyle","element","styles","property","addClass","elem","classList","add","removeClass","remove","toggleClass","added","hyphenate","getData$1","name","dataset","getAttribute","setData$1","setAttribute","removeData","removeAttribute","removeListener","type","handler","types","split","t","removeEventListener","detachEvent","addListener","_handler","once","originalHandler","_len4","_key4","addEventListener","attachEvent","dispatchEvent","event","Event","CustomEvent","bubbles","cancelable","detail","document","createEvent","initEvent","initCustomEvent","fireEvent","getEvent","srcElement","pageX","clientX","eventDoc","ownerDocument","doc","documentElement","body","scrollLeft","clientLeft","pageY","clientY","scrollTop","clientTop","getOffset","box","getBoundingClientRect","scrollX","scrollY","getByTag","tagName","getElementsByTagName","getByClass","getElementsByClassName","querySelectorAll","appendChild","removeChild","parentNode","isCrossOriginURL","parts","match","location","protocol","hostname","port","addTimestamp","timestamp","Date","getTime","getTransforms","transforms","translateX","translateY","push","transform","join","WebkitTransform","msTransform","getRotatedSizes","reversed","deg","Math","abs","arc","PI","sinArc","sin","cosArc","cos","newWidth","newHeight","getSourceCanvas","image","canvas","getContext","dstX","dstY","dstWidth","naturalWidth","dstHeight","naturalHeight","advanced","canvasWidth","canvasHeight","rotated","fillColor","fillStyle","fillRect","save","translate","imageSmoothingEnabled","imageSmoothingQuality","drawImage","floor","getOrientation","arrayBuffer","dataView","DataView","byteLength","orientation","tiffOffset","firstIFDOffset","littleEndian","endianness","app1Start","ifdStart","offset","getUint8","start","getStringFromCharCode","getUint16","getUint32","setUint16","render$1","render","initContainer","initCanvas","initCropBox","renderCanvas","cropped","renderCropBox","container","hidden","containerData","max","offsetWidth","Number","offsetHeight","imageData","oldLeft","oldTop","limited","limitCanvas","initialImageData","initialCanvasData","sizeLimited","positionLimited","minWidth","minHeight","maxWidth","Infinity","maxHeight","newCanvasLeft","newCanvasTop","minLeft","min","minTop","maxLeft","maxTop","changed","rotatedData","isSquareImage","rotatedData2","renderImage","limitCropBox","output","newImageData","reversedData","reversedWidth","reversedHeight","initialCropBoxData","maxCropBoxWidth","maxCropBoxHeight","face","cropBox","disabled","complete","preview$1","initPreview","crossOriginUrl","viewBox","image2","previews","querySelector","html","innerHTML","cssText","firstChild","empty","resetPreview","cropBoxWidth","cropBoxHeight","originalWidth","originalHeight","PointerEvent","EVENT_POINTER_DOWN","EVENT_POINTER_MOVE","EVENT_POINTER_UP","events","bind","onCropStart","cropStart","onWheel","wheel","onDblclick","dblclick","onCropMove","cropMove","onCropEnd","cropEnd","onResize","resize","unbind","REGEXP_ACTIONS","getPointer","_ref","endOnly","end","endX","endY","startX","startY","handlers","n","dragBox","contains","delta","preventDefault","wheeling","setTimeout","deltaY","wheelDelta","pointers","action","changedTouches","touch","identifier","pointerId","originalEvent","cropping","change","change$1","right","bottom","renderable","shiftKey","pointer","range","X","Y","pointers2","ratios","pointer2","x1","y1","x2","y2","z1","sqrt","sort","a","b","getMaxZoomRatio","methods","isImg","replaced","load","loaded","originalUrl","unbuild","onStart","_originalEvent","oldRatio","count","getPointersCenter","round","scaled","widthChanged","heightChanged","HTMLCanvasElement","scaledWidth","scaledHeight","scaledRatio","parameters","sourceWidth","sourceHeight","params","srcX","srcY","srcWidth","srcHeight","arr2","from","toConsumableArray","croppable","REGEXP_DATA_URL","REGEXP_DATA_URL_JPEG","AnotherCropper","Cropper","init","toDataURL","ArrayBuffer","read","dataURL","base64","binary","atob","Uint8Array","charCodeAt","dataURLToArrayBuffer","clone","xhr","XMLHttpRequest","onerror","onabort","onload","response","open","responseType","withCredentials","send","btoa","arrayBufferToDataURL","stop","onStop","insertBefore","nextSibling","newImage","getImageSize","build","template","NAMESPACE","completing","clearTimeout","factory"],"mappings":"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","file":"static/js/11.bf5698f0.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _cropperjs = _interopRequireDefault(require(\"cropperjs\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar optionProps = ['dragMode', 'aspectRatio', 'data', 'crop', // unchangeable props start from here\n'viewMode', 'preview', 'responsive', 'restore', 'checkCrossOrigin', 'checkOrientation', 'modal', 'guides', 'center', 'highlight', 'background', 'autoCrop', 'autoCropArea', 'movable', 'rotatable', 'scalable', 'zoomable', 'zoomOnTouch', 'zoomOnWheel', 'wheelZoomRatio', 'cropBoxMovable', 'cropBoxResizable', 'toggleDragModeOnDblclick', 'minContainerWidth', 'minContainerHeight', 'minCanvasWidth', 'minCanvasHeight', 'minCropBoxWidth', 'minCropBoxHeight', 'ready', 'cropstart', 'cropmove', 'cropend', 'zoom'];\nvar unchangeableProps = optionProps.slice(4);\n\nvar ReactCropper =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ReactCropper, _Component);\n\n  function ReactCropper() {\n    _classCallCheck(this, ReactCropper);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ReactCropper).apply(this, arguments));\n  }\n\n  _createClass(ReactCropper, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      var options = Object.keys(this.props).filter(function (propKey) {\n        return optionProps.indexOf(propKey) !== -1;\n      }).reduce(function (prevOptions, propKey) {\n        return _extends({}, prevOptions, _defineProperty({}, propKey, _this.props[propKey]));\n      }, {});\n      this.cropper = new _cropperjs.default(this.img, options);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (nextProps.src !== this.props.src) {\n        this.cropper.reset().clear().replace(nextProps.src);\n      }\n\n      if (nextProps.aspectRatio !== this.props.aspectRatio) {\n        this.setAspectRatio(nextProps.aspectRatio);\n      }\n\n      if (nextProps.data !== this.props.data) {\n        this.setData(nextProps.data);\n      }\n\n      if (nextProps.dragMode !== this.props.dragMode) {\n        this.setDragMode(nextProps.dragMode);\n      }\n\n      if (nextProps.cropBoxData !== this.props.cropBoxData) {\n        this.setCropBoxData(nextProps.cropBoxData);\n      }\n\n      if (nextProps.canvasData !== this.props.canvasData) {\n        this.setCanvasData(nextProps.canvasData);\n      }\n\n      if (nextProps.moveTo !== this.props.moveTo) {\n        if (nextProps.moveTo.length > 1) {\n          this.moveTo(nextProps.moveTo[0], nextProps.moveTo[1]);\n        } else {\n          this.moveTo(nextProps.moveTo[0]);\n        }\n      }\n\n      if (nextProps.zoomTo !== this.props.zoomTo) {\n        this.zoomTo(nextProps.zoomTo);\n      }\n\n      if (nextProps.rotateTo !== this.props.rotateTo) {\n        this.rotateTo(nextProps.rotateTo);\n      }\n\n      if (nextProps.scaleX !== this.props.scaleX) {\n        this.scaleX(nextProps.scaleX);\n      }\n\n      if (nextProps.scaleY !== this.props.scaleY) {\n        this.scaleY(nextProps.scaleY);\n      }\n\n      if (nextProps.enable !== this.props.enable) {\n        if (nextProps.enable) {\n          this.enable();\n        } else {\n          this.disable();\n        }\n      }\n\n      Object.keys(nextProps).forEach(function (propKey) {\n        var isDifferentVal = nextProps[propKey] !== _this2.props[propKey];\n        var isUnchangeableProps = unchangeableProps.indexOf(propKey) !== -1;\n\n        if (typeof nextProps[propKey] === 'function' && typeof _this2.props[propKey] === 'function') {\n          isDifferentVal = nextProps[propKey].toString() !== _this2.props[propKey].toString();\n        }\n\n        if (isDifferentVal && isUnchangeableProps) {\n          throw new Error(\"prop: \".concat(propKey, \" can't be change after componentDidMount\"));\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.img) {\n        // Destroy the cropper, this makes sure events such as resize are cleaned up and do not leak\n        this.cropper.destroy();\n        delete this.img;\n        delete this.cropper;\n      }\n    }\n  }, {\n    key: \"setDragMode\",\n    value: function setDragMode(mode) {\n      return this.cropper.setDragMode(mode);\n    }\n  }, {\n    key: \"setAspectRatio\",\n    value: function setAspectRatio(aspectRatio) {\n      return this.cropper.setAspectRatio(aspectRatio);\n    }\n  }, {\n    key: \"getCroppedCanvas\",\n    value: function getCroppedCanvas(options) {\n      return this.cropper.getCroppedCanvas(options);\n    }\n  }, {\n    key: \"setCropBoxData\",\n    value: function setCropBoxData(data) {\n      return this.cropper.setCropBoxData(data);\n    }\n  }, {\n    key: \"getCropBoxData\",\n    value: function getCropBoxData() {\n      return this.cropper.getCropBoxData();\n    }\n  }, {\n    key: \"setCanvasData\",\n    value: function setCanvasData(data) {\n      return this.cropper.setCanvasData(data);\n    }\n  }, {\n    key: \"getCanvasData\",\n    value: function getCanvasData() {\n      return this.cropper.getCanvasData();\n    }\n  }, {\n    key: \"getImageData\",\n    value: function getImageData() {\n      return this.cropper.getImageData();\n    }\n  }, {\n    key: \"getContainerData\",\n    value: function getContainerData() {\n      return this.cropper.getContainerData();\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(data) {\n      return this.cropper.setData(data);\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(rounded) {\n      return this.cropper.getData(rounded);\n    }\n  }, {\n    key: \"crop\",\n    value: function crop() {\n      return this.cropper.crop();\n    }\n  }, {\n    key: \"move\",\n    value: function move(offsetX, offsetY) {\n      return this.cropper.move(offsetX, offsetY);\n    }\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(x, y) {\n      return this.cropper.moveTo(x, y);\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(ratio) {\n      return this.cropper.zoom(ratio);\n    }\n  }, {\n    key: \"zoomTo\",\n    value: function zoomTo(ratio) {\n      return this.cropper.zoomTo(ratio);\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(degree) {\n      return this.cropper.rotate(degree);\n    }\n  }, {\n    key: \"rotateTo\",\n    value: function rotateTo(degree) {\n      return this.cropper.rotateTo(degree);\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      return this.cropper.enable();\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      return this.cropper.disable();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      return this.cropper.reset();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this.cropper.clear();\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(url, onlyColorChanged) {\n      return this.cropper.replace(url, onlyColorChanged);\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(scaleX, scaleY) {\n      return this.cropper.scale(scaleX, scaleY);\n    }\n  }, {\n    key: \"scaleX\",\n    value: function scaleX(_scaleX) {\n      return this.cropper.scaleX(_scaleX);\n    }\n  }, {\n    key: \"scaleY\",\n    value: function scaleY(_scaleY) {\n      return this.cropper.scaleY(_scaleY);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          src = _this$props.src,\n          alt = _this$props.alt,\n          crossOrigin = _this$props.crossOrigin,\n          style = _this$props.style,\n          className = _this$props.className;\n      return _react.default.createElement(\"div\", {\n        style: style,\n        className: className\n      }, _react.default.createElement(\"img\", {\n        crossOrigin: crossOrigin,\n        ref: function ref(img) {\n          _this3.img = img;\n        },\n        src: src,\n        alt: alt === undefined ? 'picture' : alt,\n        style: {\n          opacity: 0\n        }\n      }));\n    }\n  }]);\n\n  return ReactCropper;\n}(_react.Component);\n\nReactCropper.propTypes = {\n  style: _propTypes.default.object,\n  // eslint-disable-line react/forbid-prop-types\n  className: _propTypes.default.string,\n  // react cropper options\n  crossOrigin: _propTypes.default.string,\n  src: _propTypes.default.string,\n  alt: _propTypes.default.string,\n  // props of option can be changed after componentDidmount\n  aspectRatio: _propTypes.default.number,\n  dragMode: _propTypes.default.oneOf(['crop', 'move', 'none']),\n  data: _propTypes.default.shape({\n    x: _propTypes.default.number,\n    y: _propTypes.default.number,\n    width: _propTypes.default.number,\n    height: _propTypes.default.number,\n    rotate: _propTypes.default.number,\n    scaleX: _propTypes.default.number,\n    scaleY: _propTypes.default.number\n  }),\n  scaleX: _propTypes.default.number,\n  scaleY: _propTypes.default.number,\n  enable: _propTypes.default.bool,\n  cropBoxData: _propTypes.default.shape({\n    left: _propTypes.default.number,\n    top: _propTypes.default.number,\n    width: _propTypes.default.number,\n    height: _propTypes.default.number\n  }),\n  canvasData: _propTypes.default.shape({\n    left: _propTypes.default.number,\n    top: _propTypes.default.number,\n    width: _propTypes.default.number,\n    height: _propTypes.default.number\n  }),\n  zoomTo: _propTypes.default.number,\n  moveTo: _propTypes.default.arrayOf(_propTypes.default.number),\n  rotateTo: _propTypes.default.number,\n  // cropperjs options\n  // https://github.com/fengyuanchen/cropperjs#options\n  // aspectRatio, dragMode, data\n  viewMode: _propTypes.default.oneOf([0, 1, 2, 3]),\n  preview: _propTypes.default.string,\n  responsive: _propTypes.default.bool,\n  restore: _propTypes.default.bool,\n  checkCrossOrigin: _propTypes.default.bool,\n  checkOrientation: _propTypes.default.bool,\n  modal: _propTypes.default.bool,\n  guides: _propTypes.default.bool,\n  center: _propTypes.default.bool,\n  highlight: _propTypes.default.bool,\n  background: _propTypes.default.bool,\n  autoCrop: _propTypes.default.bool,\n  autoCropArea: _propTypes.default.number,\n  movable: _propTypes.default.bool,\n  rotatable: _propTypes.default.bool,\n  scalable: _propTypes.default.bool,\n  zoomable: _propTypes.default.bool,\n  zoomOnTouch: _propTypes.default.bool,\n  zoomOnWheel: _propTypes.default.bool,\n  wheelZoomRatio: _propTypes.default.number,\n  cropBoxMovable: _propTypes.default.bool,\n  cropBoxResizable: _propTypes.default.bool,\n  toggleDragModeOnDblclick: _propTypes.default.bool,\n  minContainerWidth: _propTypes.default.number,\n  minContainerHeight: _propTypes.default.number,\n  minCanvasWidth: _propTypes.default.number,\n  minCanvasHeight: _propTypes.default.number,\n  minCropBoxWidth: _propTypes.default.number,\n  minCropBoxHeight: _propTypes.default.number,\n  ready: _propTypes.default.func,\n  cropstart: _propTypes.default.func,\n  cropmove: _propTypes.default.func,\n  cropend: _propTypes.default.func,\n  crop: _propTypes.default.func,\n  zoom: _propTypes.default.func\n};\nReactCropper.defaultProps = {\n  src: null,\n  dragMode: 'crop',\n  data: null,\n  scaleX: 1,\n  scaleY: 1,\n  enable: true,\n  zoomTo: 1,\n  rotateTo: 0\n};\nvar _default = ReactCropper;\nexports.default = _default;","/*!\n * Cropper.js v1.0.0-rc.3\n * https://github.com/fengyuanchen/cropperjs\n *\n * Copyright (c) 2017 Fengyuan Chen\n * Released under the MIT license\n *\n * Date: 2017-07-07T12:56:42.462Z\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Cropper = factory();\n})(this, function () {\n  'use strict';\n\n  var DEFAULTS = {\n    // Define the view mode of the cropper\n    viewMode: 0,\n    // 0, 1, 2, 3\n    // Define the dragging mode of the cropper\n    dragMode: 'crop',\n    // 'crop', 'move' or 'none'\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n    // An object with the previous cropping result data\n    data: null,\n    // A selector for adding extra containers to preview\n    preview: '',\n    // Re-render the cropper when resize the window\n    responsive: true,\n    // Restore the cropped area after resize the window\n    restore: true,\n    // Check if the current image is a cross-origin image\n    checkCrossOrigin: true,\n    // Check the current image's Exif Orientation information\n    checkOrientation: true,\n    // Show the black modal\n    modal: true,\n    // Show the dashed lines for guiding\n    guides: true,\n    // Show the center indicator for guiding\n    center: true,\n    // Show the white modal to highlight the crop box\n    highlight: true,\n    // Show the grid background\n    background: true,\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n    // Enable to move the image\n    movable: true,\n    // Enable to rotate the image\n    rotatable: true,\n    // Enable to scale the image\n    scalable: true,\n    // Enable to zoom the image\n    zoomable: true,\n    // Enable to zoom the image by dragging touch\n    zoomOnTouch: true,\n    // Enable to zoom the image by wheeling mouse\n    zoomOnWheel: true,\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n    // Enable to move the crop box\n    cropBoxMovable: true,\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n    toggleDragModeOnDblclick: true,\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: 200,\n    minContainerHeight: 100,\n    // Shortcuts of events\n    ready: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n  };\n  var TEMPLATE = '<div class=\"cropper-container\">' + '<div class=\"cropper-wrap-box\">' + '<div class=\"cropper-canvas\"></div>' + '</div>' + '<div class=\"cropper-drag-box\"></div>' + '<div class=\"cropper-crop-box\">' + '<span class=\"cropper-view-box\"></span>' + '<span class=\"cropper-dashed dashed-h\"></span>' + '<span class=\"cropper-dashed dashed-v\"></span>' + '<span class=\"cropper-center\"></span>' + '<span class=\"cropper-face\"></span>' + '<span class=\"cropper-line line-e\" data-action=\"e\"></span>' + '<span class=\"cropper-line line-n\" data-action=\"n\"></span>' + '<span class=\"cropper-line line-w\" data-action=\"w\"></span>' + '<span class=\"cropper-line line-s\" data-action=\"s\"></span>' + '<span class=\"cropper-point point-e\" data-action=\"e\"></span>' + '<span class=\"cropper-point point-n\" data-action=\"n\"></span>' + '<span class=\"cropper-point point-w\" data-action=\"w\"></span>' + '<span class=\"cropper-point point-s\" data-action=\"s\"></span>' + '<span class=\"cropper-point point-ne\" data-action=\"ne\"></span>' + '<span class=\"cropper-point point-nw\" data-action=\"nw\"></span>' + '<span class=\"cropper-point point-sw\" data-action=\"sw\"></span>' + '<span class=\"cropper-point point-se\" data-action=\"se\"></span>' + '</div>' + '</div>';\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n\n  var classCallCheck = function classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var get = function get(object, property, receiver) {\n    if (object === null) object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        return get(parent, property, receiver);\n      }\n    } else if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  };\n\n  var set = function set(object, property, value, receiver) {\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent !== null) {\n        set(parent, property, value, receiver);\n      }\n    } else if (\"value\" in desc && desc.writable) {\n      desc.value = value;\n    } else {\n      var setter = desc.set;\n\n      if (setter !== undefined) {\n        setter.call(receiver, value);\n      }\n    }\n\n    return value;\n  };\n\n  var toConsumableArray = function toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }; // RegExps\n\n\n  var REGEXP_DATA_URL_HEAD = /^data:.*,/;\n  var REGEXP_HYPHENATE = /([a-z\\d])([A-Z])/g;\n  var REGEXP_ORIGINS = /^(https?:)\\/\\/([^:/?#]+):?(\\d*)/i;\n  var REGEXP_SPACES = /\\s+/;\n  var REGEXP_SUFFIX = /^(width|height|left|top|marginLeft|marginTop)$/;\n  var REGEXP_TRIM = /^\\s+(.*)\\s+$/;\n  var REGEXP_USERAGENT = /(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i; // Utilities\n\n  var navigator = typeof window !== 'undefined' ? window.navigator : null;\n  var IS_SAFARI_OR_UIWEBVIEW = navigator && REGEXP_USERAGENT.test(navigator.userAgent);\n  var objectProto = Object.prototype;\n  var toString = objectProto.toString;\n  var hasOwnProperty = objectProto.hasOwnProperty;\n  var slice = Array.prototype.slice;\n  var fromCharCode = String.fromCharCode;\n\n  function typeOf(obj) {\n    return toString.call(obj).slice(8, -1).toLowerCase();\n  }\n\n  function isNumber(num) {\n    return typeof num === 'number' && !isNaN(num);\n  }\n\n  function isUndefined(obj) {\n    return typeof obj === 'undefined';\n  }\n\n  function isObject(obj) {\n    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null;\n  }\n\n  function isPlainObject(obj) {\n    if (!isObject(obj)) {\n      return false;\n    }\n\n    try {\n      var _constructor = obj.constructor;\n      var prototype = _constructor.prototype;\n      return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function isFunction(fn) {\n    return typeOf(fn) === 'function';\n  }\n\n  function isArray(arr) {\n    return Array.isArray ? Array.isArray(arr) : typeOf(arr) === 'array';\n  }\n\n  function trim(str) {\n    if (typeof str === 'string') {\n      str = str.trim ? str.trim() : str.replace(REGEXP_TRIM, '$1');\n    }\n\n    return str;\n  }\n\n  function each(obj, callback) {\n    if (obj && isFunction(callback)) {\n      var i = void 0;\n\n      if (isArray(obj) || isNumber(obj.length)\n      /* array-like */\n      ) {\n          var length = obj.length;\n\n          for (i = 0; i < length; i++) {\n            if (callback.call(obj, obj[i], i, obj) === false) {\n              break;\n            }\n          }\n        } else if (isObject(obj)) {\n        Object.keys(obj).forEach(function (key) {\n          callback.call(obj, obj[key], key, obj);\n        });\n      }\n    }\n\n    return obj;\n  }\n\n  function extend(obj) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (isObject(obj) && args.length > 0) {\n      if (Object.assign) {\n        return Object.assign.apply(Object, [obj].concat(args));\n      }\n\n      args.forEach(function (arg) {\n        if (isObject(arg)) {\n          Object.keys(arg).forEach(function (key) {\n            obj[key] = arg[key];\n          });\n        }\n      });\n    }\n\n    return obj;\n  }\n\n  function proxy(fn, context) {\n    for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    return function () {\n      for (var _len3 = arguments.length, args2 = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args2[_key3] = arguments[_key3];\n      }\n\n      return fn.apply(context, args.concat(args2));\n    };\n  }\n\n  function setStyle(element, styles) {\n    var style = element.style;\n    each(styles, function (value, property) {\n      if (REGEXP_SUFFIX.test(property) && isNumber(value)) {\n        value += 'px';\n      }\n\n      style[property] = value;\n    });\n  }\n\n  function hasClass(element, value) {\n    return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;\n  }\n\n  function addClass(element, value) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      each(element, function (elem) {\n        addClass(elem, value);\n      });\n      return;\n    }\n\n    if (element.classList) {\n      element.classList.add(value);\n      return;\n    }\n\n    var className = trim(element.className);\n\n    if (!className) {\n      element.className = value;\n    } else if (className.indexOf(value) < 0) {\n      element.className = className + ' ' + value;\n    }\n  }\n\n  function removeClass(element, value) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      each(element, function (elem) {\n        removeClass(elem, value);\n      });\n      return;\n    }\n\n    if (element.classList) {\n      element.classList.remove(value);\n      return;\n    }\n\n    if (element.className.indexOf(value) >= 0) {\n      element.className = element.className.replace(value, '');\n    }\n  }\n\n  function toggleClass(element, value, added) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      each(element, function (elem) {\n        toggleClass(elem, value, added);\n      });\n      return;\n    } // IE10-11 doesn't support the second parameter of `classList.toggle`\n\n\n    if (added) {\n      addClass(element, value);\n    } else {\n      removeClass(element, value);\n    }\n  }\n\n  function hyphenate(str) {\n    return str.replace(REGEXP_HYPHENATE, '$1-$2').toLowerCase();\n  }\n\n  function getData$1(element, name) {\n    if (isObject(element[name])) {\n      return element[name];\n    } else if (element.dataset) {\n      return element.dataset[name];\n    }\n\n    return element.getAttribute('data-' + hyphenate(name));\n  }\n\n  function setData$1(element, name, data) {\n    if (isObject(data)) {\n      element[name] = data;\n    } else if (element.dataset) {\n      element.dataset[name] = data;\n    } else {\n      element.setAttribute('data-' + hyphenate(name), data);\n    }\n  }\n\n  function removeData(element, name) {\n    if (isObject(element[name])) {\n      delete element[name];\n    } else if (element.dataset) {\n      // #128 Safari not allows to delete dataset property\n      try {\n        delete element.dataset[name];\n      } catch (e) {\n        element.dataset[name] = null;\n      }\n    } else {\n      element.removeAttribute('data-' + hyphenate(name));\n    }\n  }\n\n  function removeListener(element, type, handler) {\n    var types = trim(type).split(REGEXP_SPACES);\n\n    if (types.length > 1) {\n      each(types, function (t) {\n        removeListener(element, t, handler);\n      });\n      return;\n    }\n\n    if (element.removeEventListener) {\n      element.removeEventListener(type, handler, false);\n    } else if (element.detachEvent) {\n      element.detachEvent('on' + type, handler);\n    }\n  }\n\n  function addListener(element, type, _handler, once) {\n    var types = trim(type).split(REGEXP_SPACES);\n    var originalHandler = _handler;\n\n    if (types.length > 1) {\n      each(types, function (t) {\n        addListener(element, t, _handler);\n      });\n      return;\n    }\n\n    if (once) {\n      _handler = function handler() {\n        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n\n        removeListener(element, type, _handler);\n        return originalHandler.apply(element, args);\n      };\n    }\n\n    if (element.addEventListener) {\n      element.addEventListener(type, _handler, false);\n    } else if (element.attachEvent) {\n      element.attachEvent('on' + type, _handler);\n    }\n  }\n\n  function dispatchEvent(element, type, data) {\n    if (element.dispatchEvent) {\n      var event = void 0; // Event and CustomEvent on IE9-11 are global objects, not constructors\n\n      if (isFunction(Event) && isFunction(CustomEvent)) {\n        if (isUndefined(data)) {\n          event = new Event(type, {\n            bubbles: true,\n            cancelable: true\n          });\n        } else {\n          event = new CustomEvent(type, {\n            detail: data,\n            bubbles: true,\n            cancelable: true\n          });\n        }\n      } else if (isUndefined(data)) {\n        event = document.createEvent('Event');\n        event.initEvent(type, true, true);\n      } else {\n        event = document.createEvent('CustomEvent');\n        event.initCustomEvent(type, true, true, data);\n      } // IE9+\n\n\n      return element.dispatchEvent(event);\n    } else if (element.fireEvent) {\n      // IE6-10 (native events only)\n      return element.fireEvent('on' + type);\n    }\n\n    return true;\n  }\n\n  function getEvent(event) {\n    var e = event || window.event; // Fix target property (IE8)\n\n    if (!e.target) {\n      e.target = e.srcElement || document;\n    }\n\n    if (!isNumber(e.pageX) && isNumber(e.clientX)) {\n      var eventDoc = event.target.ownerDocument || document;\n      var doc = eventDoc.documentElement;\n      var body = eventDoc.body;\n      e.pageX = e.clientX + ((doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0));\n      e.pageY = e.clientY + ((doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0));\n    }\n\n    return e;\n  }\n\n  function getOffset(element) {\n    var doc = document.documentElement;\n    var box = element.getBoundingClientRect();\n    return {\n      left: box.left + ((window.scrollX || doc && doc.scrollLeft || 0) - (doc && doc.clientLeft || 0)),\n      top: box.top + ((window.scrollY || doc && doc.scrollTop || 0) - (doc && doc.clientTop || 0))\n    };\n  }\n\n  function getByTag(element, tagName) {\n    return element.getElementsByTagName(tagName);\n  }\n\n  function getByClass(element, className) {\n    return element.getElementsByClassName ? element.getElementsByClassName(className) : element.querySelectorAll('.' + className);\n  }\n\n  function createElement(tagName) {\n    return document.createElement(tagName);\n  }\n\n  function appendChild(element, elem) {\n    element.appendChild(elem);\n  }\n\n  function removeChild(element) {\n    if (element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n\n  function empty(element) {\n    while (element.firstChild) {\n      element.removeChild(element.firstChild);\n    }\n  }\n\n  function isCrossOriginURL(url) {\n    var parts = url.match(REGEXP_ORIGINS);\n    return parts && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n  }\n\n  function addTimestamp(url) {\n    var timestamp = 'timestamp=' + new Date().getTime();\n    return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;\n  }\n\n  function getImageSize(image, callback) {\n    // Modern browsers (ignore Safari)\n    if (image.naturalWidth && !IS_SAFARI_OR_UIWEBVIEW) {\n      callback(image.naturalWidth, image.naturalHeight);\n      return;\n    } // IE8: Don't use `new Image()` here\n\n\n    var newImage = createElement('img');\n\n    newImage.onload = function load() {\n      callback(this.width, this.height);\n    };\n\n    newImage.src = image.src;\n  }\n\n  function getTransforms(data) {\n    var transforms = [];\n    var translateX = data.translateX;\n    var translateY = data.translateY;\n    var rotate = data.rotate;\n    var scaleX = data.scaleX;\n    var scaleY = data.scaleY;\n\n    if (isNumber(translateX) && translateX !== 0) {\n      transforms.push('translateX(' + translateX + 'px)');\n    }\n\n    if (isNumber(translateY) && translateY !== 0) {\n      transforms.push('translateY(' + translateY + 'px)');\n    } // Rotate should come first before scale to match orientation transform\n\n\n    if (isNumber(rotate) && rotate !== 0) {\n      transforms.push('rotate(' + rotate + 'deg)');\n    }\n\n    if (isNumber(scaleX) && scaleX !== 1) {\n      transforms.push('scaleX(' + scaleX + ')');\n    }\n\n    if (isNumber(scaleY) && scaleY !== 1) {\n      transforms.push('scaleY(' + scaleY + ')');\n    }\n\n    var transform = transforms.length ? transforms.join(' ') : 'none';\n    return {\n      WebkitTransform: transform,\n      msTransform: transform,\n      transform: transform\n    };\n  }\n\n  function getRotatedSizes(data, reversed) {\n    var deg = Math.abs(data.degree) % 180;\n    var arc = (deg > 90 ? 180 - deg : deg) * Math.PI / 180;\n    var sinArc = Math.sin(arc);\n    var cosArc = Math.cos(arc);\n    var width = data.width;\n    var height = data.height;\n    var aspectRatio = data.aspectRatio;\n    var newWidth = void 0;\n    var newHeight = void 0;\n\n    if (!reversed) {\n      newWidth = width * cosArc + height * sinArc;\n      newHeight = width * sinArc + height * cosArc;\n    } else {\n      newWidth = width / (cosArc + sinArc / aspectRatio);\n      newHeight = newWidth / aspectRatio;\n    }\n\n    return {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n\n  function getSourceCanvas(image, data, options) {\n    var canvas = createElement('canvas');\n    var context = canvas.getContext('2d');\n    var dstX = 0;\n    var dstY = 0;\n    var dstWidth = data.naturalWidth;\n    var dstHeight = data.naturalHeight;\n    var rotate = data.rotate;\n    var scaleX = data.scaleX;\n    var scaleY = data.scaleY;\n    var scalable = isNumber(scaleX) && isNumber(scaleY) && (scaleX !== 1 || scaleY !== 1);\n    var rotatable = isNumber(rotate) && rotate !== 0;\n    var advanced = rotatable || scalable;\n    var canvasWidth = dstWidth * Math.abs(scaleX || 1);\n    var canvasHeight = dstHeight * Math.abs(scaleY || 1);\n    var translateX = void 0;\n    var translateY = void 0;\n    var rotated = void 0;\n\n    if (scalable) {\n      translateX = canvasWidth / 2;\n      translateY = canvasHeight / 2;\n    }\n\n    if (rotatable) {\n      rotated = getRotatedSizes({\n        width: canvasWidth,\n        height: canvasHeight,\n        degree: rotate\n      });\n      canvasWidth = rotated.width;\n      canvasHeight = rotated.height;\n      translateX = canvasWidth / 2;\n      translateY = canvasHeight / 2;\n    }\n\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n\n    if (options.fillColor) {\n      context.fillStyle = options.fillColor;\n      context.fillRect(0, 0, canvasWidth, canvasHeight);\n    }\n\n    if (advanced) {\n      dstX = -dstWidth / 2;\n      dstY = -dstHeight / 2;\n      context.save();\n      context.translate(translateX, translateY);\n    } // Rotate should come first before scale as in the \"getTransform\" function\n\n\n    if (rotatable) {\n      context.rotate(rotate * Math.PI / 180);\n    }\n\n    if (scalable) {\n      context.scale(scaleX, scaleY);\n    }\n\n    context.imageSmoothingEnabled = !!options.imageSmoothingEnabled;\n\n    if (options.imageSmoothingQuality) {\n      context.imageSmoothingQuality = options.imageSmoothingQuality;\n    }\n\n    context.drawImage(image, Math.floor(dstX), Math.floor(dstY), Math.floor(dstWidth), Math.floor(dstHeight));\n\n    if (advanced) {\n      context.restore();\n    }\n\n    return canvas;\n  }\n\n  function getStringFromCharCode(dataView, start, length) {\n    var str = '';\n    var i = start;\n\n    for (length += start; i < length; i++) {\n      str += fromCharCode(dataView.getUint8(i));\n    }\n\n    return str;\n  }\n\n  function getOrientation(arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n    var length = dataView.byteLength;\n    var orientation = void 0;\n    var exifIDCode = void 0;\n    var tiffOffset = void 0;\n    var firstIFDOffset = void 0;\n    var littleEndian = void 0;\n    var endianness = void 0;\n    var app1Start = void 0;\n    var ifdStart = void 0;\n    var offset = void 0;\n    var i = void 0; // Only handle JPEG image (start by 0xFFD8)\n\n    if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n      offset = 2;\n\n      while (offset < length) {\n        if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n          app1Start = offset;\n          break;\n        }\n\n        offset++;\n      }\n    }\n\n    if (app1Start) {\n      exifIDCode = app1Start + 4;\n      tiffOffset = app1Start + 10;\n\n      if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n        endianness = dataView.getUint16(tiffOffset);\n        littleEndian = endianness === 0x4949;\n\n        if (littleEndian || endianness === 0x4D4D\n        /* bigEndian */\n        ) {\n            if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n              firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n              if (firstIFDOffset >= 0x00000008) {\n                ifdStart = tiffOffset + firstIFDOffset;\n              }\n            }\n          }\n      }\n    }\n\n    if (ifdStart) {\n      length = dataView.getUint16(ifdStart, littleEndian);\n\n      for (i = 0; i < length; i++) {\n        offset = ifdStart + i * 12 + 2;\n\n        if (dataView.getUint16(offset, littleEndian) === 0x0112\n        /* Orientation */\n        ) {\n            // 8 is the offset of the current tag's value\n            offset += 8; // Get the original orientation value\n\n            orientation = dataView.getUint16(offset, littleEndian); // Override the orientation with its default value for Safari\n\n            if (IS_SAFARI_OR_UIWEBVIEW) {\n              dataView.setUint16(offset, 1, littleEndian);\n            }\n\n            break;\n          }\n      }\n    }\n\n    return orientation;\n  }\n\n  function dataURLToArrayBuffer(dataURL) {\n    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n    var binary = atob(base64);\n    var length = binary.length;\n    var arrayBuffer = new ArrayBuffer(length);\n    var dataView = new Uint8Array(arrayBuffer);\n    var i = void 0;\n\n    for (i = 0; i < length; i++) {\n      dataView[i] = binary.charCodeAt(i);\n    }\n\n    return arrayBuffer;\n  } // Only available for JPEG image\n\n\n  function arrayBufferToDataURL(arrayBuffer) {\n    var dataView = new Uint8Array(arrayBuffer);\n    var length = dataView.length;\n    var base64 = '';\n    var i = void 0;\n\n    for (i = 0; i < length; i++) {\n      base64 += fromCharCode(dataView[i]);\n    }\n\n    return 'data:image/jpeg;base64,' + btoa(base64);\n  }\n\n  var render$1 = {\n    render: function render() {\n      var self = this;\n      self.initContainer();\n      self.initCanvas();\n      self.initCropBox();\n      self.renderCanvas();\n\n      if (self.cropped) {\n        self.renderCropBox();\n      }\n    },\n    initContainer: function initContainer() {\n      var self = this;\n      var options = self.options;\n      var element = self.element;\n      var container = self.container;\n      var cropper = self.cropper;\n      var hidden = 'cropper-hidden';\n      var containerData = void 0;\n      addClass(cropper, hidden);\n      removeClass(element, hidden);\n      self.containerData = containerData = {\n        width: Math.max(container.offsetWidth, Number(options.minContainerWidth) || 200),\n        height: Math.max(container.offsetHeight, Number(options.minContainerHeight) || 100)\n      };\n      setStyle(cropper, {\n        width: containerData.width,\n        height: containerData.height\n      });\n      addClass(element, hidden);\n      removeClass(cropper, hidden);\n    },\n    // Canvas (image wrapper)\n    initCanvas: function initCanvas() {\n      var self = this;\n      var viewMode = self.options.viewMode;\n      var containerData = self.containerData;\n      var imageData = self.imageData;\n      var rotated = Math.abs(imageData.rotate) % 180 === 90;\n      var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\n      var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\n      var aspectRatio = naturalWidth / naturalHeight;\n      var canvasWidth = containerData.width;\n      var canvasHeight = containerData.height;\n\n      if (containerData.height * aspectRatio > containerData.width) {\n        if (viewMode === 3) {\n          canvasWidth = containerData.height * aspectRatio;\n        } else {\n          canvasHeight = containerData.width / aspectRatio;\n        }\n      } else if (viewMode === 3) {\n        canvasHeight = containerData.width / aspectRatio;\n      } else {\n        canvasWidth = containerData.height * aspectRatio;\n      }\n\n      var canvasData = {\n        naturalWidth: naturalWidth,\n        naturalHeight: naturalHeight,\n        aspectRatio: aspectRatio,\n        width: canvasWidth,\n        height: canvasHeight\n      };\n      canvasData.oldLeft = canvasData.left = (containerData.width - canvasWidth) / 2;\n      canvasData.oldTop = canvasData.top = (containerData.height - canvasHeight) / 2;\n      self.canvasData = canvasData;\n      self.limited = viewMode === 1 || viewMode === 2;\n      self.limitCanvas(true, true);\n      self.initialImageData = extend({}, imageData);\n      self.initialCanvasData = extend({}, canvasData);\n    },\n    limitCanvas: function limitCanvas(sizeLimited, positionLimited) {\n      var self = this;\n      var options = self.options;\n      var viewMode = options.viewMode;\n      var containerData = self.containerData;\n      var canvasData = self.canvasData;\n      var aspectRatio = canvasData.aspectRatio;\n      var cropBoxData = self.cropBoxData;\n      var cropped = self.cropped && cropBoxData;\n\n      if (sizeLimited) {\n        var minCanvasWidth = Number(options.minCanvasWidth) || 0;\n        var minCanvasHeight = Number(options.minCanvasHeight) || 0;\n\n        if (viewMode > 1) {\n          minCanvasWidth = Math.max(minCanvasWidth, containerData.width);\n          minCanvasHeight = Math.max(minCanvasHeight, containerData.height);\n\n          if (viewMode === 3) {\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        } else if (viewMode > 0) {\n          if (minCanvasWidth) {\n            minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);\n          } else if (minCanvasHeight) {\n            minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);\n          } else if (cropped) {\n            minCanvasWidth = cropBoxData.width;\n            minCanvasHeight = cropBoxData.height;\n\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        }\n\n        if (minCanvasWidth && minCanvasHeight) {\n          if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n            minCanvasHeight = minCanvasWidth / aspectRatio;\n          } else {\n            minCanvasWidth = minCanvasHeight * aspectRatio;\n          }\n        } else if (minCanvasWidth) {\n          minCanvasHeight = minCanvasWidth / aspectRatio;\n        } else if (minCanvasHeight) {\n          minCanvasWidth = minCanvasHeight * aspectRatio;\n        }\n\n        canvasData.minWidth = minCanvasWidth;\n        canvasData.minHeight = minCanvasHeight;\n        canvasData.maxWidth = Infinity;\n        canvasData.maxHeight = Infinity;\n      }\n\n      if (positionLimited) {\n        if (viewMode) {\n          var newCanvasLeft = containerData.width - canvasData.width;\n          var newCanvasTop = containerData.height - canvasData.height;\n          canvasData.minLeft = Math.min(0, newCanvasLeft);\n          canvasData.minTop = Math.min(0, newCanvasTop);\n          canvasData.maxLeft = Math.max(0, newCanvasLeft);\n          canvasData.maxTop = Math.max(0, newCanvasTop);\n\n          if (cropped && self.limited) {\n            canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));\n            canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));\n            canvasData.maxLeft = cropBoxData.left;\n            canvasData.maxTop = cropBoxData.top;\n\n            if (viewMode === 2) {\n              if (canvasData.width >= containerData.width) {\n                canvasData.minLeft = Math.min(0, newCanvasLeft);\n                canvasData.maxLeft = Math.max(0, newCanvasLeft);\n              }\n\n              if (canvasData.height >= containerData.height) {\n                canvasData.minTop = Math.min(0, newCanvasTop);\n                canvasData.maxTop = Math.max(0, newCanvasTop);\n              }\n            }\n          }\n        } else {\n          canvasData.minLeft = -canvasData.width;\n          canvasData.minTop = -canvasData.height;\n          canvasData.maxLeft = containerData.width;\n          canvasData.maxTop = containerData.height;\n        }\n      }\n    },\n    renderCanvas: function renderCanvas(changed) {\n      var self = this;\n      var canvasData = self.canvasData;\n      var imageData = self.imageData;\n      var rotate = imageData.rotate;\n\n      if (self.rotated) {\n        self.rotated = false; // Computes rotated sizes with image sizes\n\n        var rotatedData = getRotatedSizes({\n          width: imageData.width,\n          height: imageData.height,\n          degree: rotate\n        });\n        var aspectRatio = rotatedData.width / rotatedData.height;\n        var isSquareImage = imageData.aspectRatio === 1;\n\n        if (isSquareImage || aspectRatio !== canvasData.aspectRatio) {\n          canvasData.left -= (rotatedData.width - canvasData.width) / 2;\n          canvasData.top -= (rotatedData.height - canvasData.height) / 2;\n          canvasData.width = rotatedData.width;\n          canvasData.height = rotatedData.height;\n          canvasData.aspectRatio = aspectRatio;\n          canvasData.naturalWidth = imageData.naturalWidth;\n          canvasData.naturalHeight = imageData.naturalHeight; // Computes rotated sizes with natural image sizes\n\n          if (isSquareImage && rotate % 90 || rotate % 180) {\n            var rotatedData2 = getRotatedSizes({\n              width: imageData.naturalWidth,\n              height: imageData.naturalHeight,\n              degree: rotate\n            });\n            canvasData.naturalWidth = rotatedData2.width;\n            canvasData.naturalHeight = rotatedData2.height;\n          }\n\n          self.limitCanvas(true, false);\n        }\n      }\n\n      if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n        canvasData.left = canvasData.oldLeft;\n      }\n\n      if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n        canvasData.top = canvasData.oldTop;\n      }\n\n      canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n      canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n      self.limitCanvas(false, true);\n      canvasData.oldLeft = canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\n      canvasData.oldTop = canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);\n      setStyle(self.canvas, extend({\n        width: canvasData.width,\n        height: canvasData.height\n      }, getTransforms({\n        translateX: canvasData.left,\n        translateY: canvasData.top\n      })));\n      self.renderImage();\n\n      if (self.cropped && self.limited) {\n        self.limitCropBox(true, true);\n      }\n\n      if (changed) {\n        self.output();\n      }\n    },\n    renderImage: function renderImage(changed) {\n      var self = this;\n      var canvasData = self.canvasData;\n      var imageData = self.imageData;\n      var newImageData = void 0;\n      var reversedData = void 0;\n      var reversedWidth = void 0;\n      var reversedHeight = void 0;\n\n      if (imageData.rotate) {\n        reversedData = getRotatedSizes({\n          width: canvasData.width,\n          height: canvasData.height,\n          degree: imageData.rotate,\n          aspectRatio: imageData.aspectRatio\n        }, true);\n        reversedWidth = reversedData.width;\n        reversedHeight = reversedData.height;\n        newImageData = {\n          width: reversedWidth,\n          height: reversedHeight,\n          left: (canvasData.width - reversedWidth) / 2,\n          top: (canvasData.height - reversedHeight) / 2\n        };\n      }\n\n      extend(imageData, newImageData || {\n        width: canvasData.width,\n        height: canvasData.height,\n        left: 0,\n        top: 0\n      });\n      setStyle(self.image, extend({\n        width: imageData.width,\n        height: imageData.height\n      }, getTransforms(extend({\n        translateX: imageData.left,\n        translateY: imageData.top\n      }, imageData))));\n\n      if (changed) {\n        self.output();\n      }\n    },\n    initCropBox: function initCropBox() {\n      var self = this;\n      var options = self.options;\n      var aspectRatio = options.aspectRatio;\n      var autoCropArea = Number(options.autoCropArea) || 0.8;\n      var canvasData = self.canvasData;\n      var cropBoxData = {\n        width: canvasData.width,\n        height: canvasData.height\n      };\n\n      if (aspectRatio) {\n        if (canvasData.height * aspectRatio > canvasData.width) {\n          cropBoxData.height = cropBoxData.width / aspectRatio;\n        } else {\n          cropBoxData.width = cropBoxData.height * aspectRatio;\n        }\n      }\n\n      self.cropBoxData = cropBoxData;\n      self.limitCropBox(true, true); // Initialize auto crop area\n\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight); // The width/height of auto crop area must large than \"minWidth/Height\"\n\n      cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\n      cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\n      cropBoxData.oldLeft = cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n      cropBoxData.oldTop = cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n      self.initialCropBoxData = extend({}, cropBoxData);\n    },\n    limitCropBox: function limitCropBox(sizeLimited, positionLimited) {\n      var self = this;\n      var options = self.options;\n      var aspectRatio = options.aspectRatio;\n      var containerData = self.containerData;\n      var canvasData = self.canvasData;\n      var cropBoxData = self.cropBoxData;\n      var limited = self.limited;\n\n      if (sizeLimited) {\n        var minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\n        var minCropBoxHeight = Number(options.minCropBoxHeight) || 0;\n        var maxCropBoxWidth = Math.min(containerData.width, limited ? canvasData.width : containerData.width);\n        var maxCropBoxHeight = Math.min(containerData.height, limited ? canvasData.height : containerData.height); // The min/maxCropBoxWidth/Height must be less than containerWidth/Height\n\n        minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);\n        minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);\n\n        if (aspectRatio) {\n          if (minCropBoxWidth && minCropBoxHeight) {\n            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n              minCropBoxHeight = minCropBoxWidth / aspectRatio;\n            } else {\n              minCropBoxWidth = minCropBoxHeight * aspectRatio;\n            }\n          } else if (minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else if (minCropBoxHeight) {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n\n          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n          } else {\n            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n          }\n        } // The minWidth/Height must be less than maxWidth/Height\n\n\n        cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);\n        cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);\n        cropBoxData.maxWidth = maxCropBoxWidth;\n        cropBoxData.maxHeight = maxCropBoxHeight;\n      }\n\n      if (positionLimited) {\n        if (limited) {\n          cropBoxData.minLeft = Math.max(0, canvasData.left);\n          cropBoxData.minTop = Math.max(0, canvasData.top);\n          cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\n          cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\n        } else {\n          cropBoxData.minLeft = 0;\n          cropBoxData.minTop = 0;\n          cropBoxData.maxLeft = containerData.width - cropBoxData.width;\n          cropBoxData.maxTop = containerData.height - cropBoxData.height;\n        }\n      }\n    },\n    renderCropBox: function renderCropBox() {\n      var self = this;\n      var options = self.options;\n      var containerData = self.containerData;\n      var cropBoxData = self.cropBoxData;\n\n      if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n        cropBoxData.left = cropBoxData.oldLeft;\n      }\n\n      if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n        cropBoxData.top = cropBoxData.oldTop;\n      }\n\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n      self.limitCropBox(false, true);\n      cropBoxData.oldLeft = cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\n      cropBoxData.oldTop = cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\n\n      if (options.movable && options.cropBoxMovable) {\n        // Turn to move the canvas when the crop box is equal to the container\n        setData$1(self.face, 'action', cropBoxData.width === containerData.width && cropBoxData.height === containerData.height ? 'move' : 'all');\n      }\n\n      setStyle(self.cropBox, extend({\n        width: cropBoxData.width,\n        height: cropBoxData.height\n      }, getTransforms({\n        translateX: cropBoxData.left,\n        translateY: cropBoxData.top\n      })));\n\n      if (self.cropped && self.limited) {\n        self.limitCanvas(true, true);\n      }\n\n      if (!self.disabled) {\n        self.output();\n      }\n    },\n    output: function output() {\n      var self = this;\n      self.preview();\n\n      if (self.complete) {\n        dispatchEvent(self.element, 'crop', self.getData());\n      }\n    }\n  };\n  var DATA_PREVIEW = 'preview';\n  var preview$1 = {\n    initPreview: function initPreview() {\n      var self = this;\n      var preview = self.options.preview;\n      var image = createElement('img');\n      var crossOrigin = self.crossOrigin;\n      var url = crossOrigin ? self.crossOriginUrl : self.url;\n\n      if (crossOrigin) {\n        image.crossOrigin = crossOrigin;\n      }\n\n      image.src = url;\n      appendChild(self.viewBox, image);\n      self.image2 = image;\n\n      if (!preview) {\n        return;\n      }\n\n      var previews = preview.querySelector ? [preview] : document.querySelectorAll(preview);\n      self.previews = previews;\n      each(previews, function (element) {\n        var img = createElement('img'); // Save the original size for recover\n\n        setData$1(element, DATA_PREVIEW, {\n          width: element.offsetWidth,\n          height: element.offsetHeight,\n          html: element.innerHTML\n        });\n\n        if (crossOrigin) {\n          img.crossOrigin = crossOrigin;\n        }\n\n        img.src = url;\n        /**\n         * Override img element styles\n         * Add `display:block` to avoid margin top issue\n         * Add `height:auto` to override `height` attribute on IE8\n         * (Occur only when margin-top <= -height)\n         */\n\n        img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;\"';\n        empty(element);\n        appendChild(element, img);\n      });\n    },\n    resetPreview: function resetPreview() {\n      each(this.previews, function (element) {\n        var data = getData$1(element, DATA_PREVIEW);\n        setStyle(element, {\n          width: data.width,\n          height: data.height\n        });\n        element.innerHTML = data.html;\n        removeData(element, DATA_PREVIEW);\n      });\n    },\n    preview: function preview() {\n      var self = this;\n      var imageData = self.imageData;\n      var canvasData = self.canvasData;\n      var cropBoxData = self.cropBoxData;\n      var cropBoxWidth = cropBoxData.width;\n      var cropBoxHeight = cropBoxData.height;\n      var width = imageData.width;\n      var height = imageData.height;\n      var left = cropBoxData.left - canvasData.left - imageData.left;\n      var top = cropBoxData.top - canvasData.top - imageData.top;\n\n      if (!self.cropped || self.disabled) {\n        return;\n      }\n\n      setStyle(self.image2, extend({\n        width: width,\n        height: height\n      }, getTransforms(extend({\n        translateX: -left,\n        translateY: -top\n      }, imageData))));\n      each(self.previews, function (element) {\n        var data = getData$1(element, DATA_PREVIEW);\n        var originalWidth = data.width;\n        var originalHeight = data.height;\n        var newWidth = originalWidth;\n        var newHeight = originalHeight;\n        var ratio = 1;\n\n        if (cropBoxWidth) {\n          ratio = originalWidth / cropBoxWidth;\n          newHeight = cropBoxHeight * ratio;\n        }\n\n        if (cropBoxHeight && newHeight > originalHeight) {\n          ratio = originalHeight / cropBoxHeight;\n          newWidth = cropBoxWidth * ratio;\n          newHeight = originalHeight;\n        }\n\n        setStyle(element, {\n          width: newWidth,\n          height: newHeight\n        });\n        setStyle(getByTag(element, 'img')[0], extend({\n          width: width * ratio,\n          height: height * ratio\n        }, getTransforms(extend({\n          translateX: -left * ratio,\n          translateY: -top * ratio\n        }, imageData))));\n      });\n    }\n  }; // Globals\n\n  var PointerEvent = typeof window !== 'undefined' ? window.PointerEvent : null; // Events\n\n  var EVENT_POINTER_DOWN = PointerEvent ? 'pointerdown' : 'touchstart mousedown';\n  var EVENT_POINTER_MOVE = PointerEvent ? 'pointermove' : 'touchmove mousemove';\n  var EVENT_POINTER_UP = PointerEvent ? ' pointerup pointercancel' : 'touchend touchcancel mouseup';\n  var EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll';\n  var EVENT_DBLCLICK = 'dblclick';\n  var EVENT_RESIZE = 'resize';\n  var EVENT_CROP_START = 'cropstart';\n  var EVENT_CROP_MOVE = 'cropmove';\n  var EVENT_CROP_END = 'cropend';\n  var EVENT_CROP$1 = 'crop';\n  var EVENT_ZOOM = 'zoom';\n  var events = {\n    bind: function bind() {\n      var self = this;\n      var options = self.options;\n      var element = self.element;\n      var cropper = self.cropper;\n\n      if (isFunction(options.cropstart)) {\n        addListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        addListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        addListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        addListener(element, EVENT_CROP$1, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        addListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      addListener(cropper, EVENT_POINTER_DOWN, self.onCropStart = proxy(self.cropStart, self));\n\n      if (options.zoomable && options.zoomOnWheel) {\n        addListener(cropper, EVENT_WHEEL, self.onWheel = proxy(self.wheel, self));\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        addListener(cropper, EVENT_DBLCLICK, self.onDblclick = proxy(self.dblclick, self));\n      }\n\n      addListener(document, EVENT_POINTER_MOVE, self.onCropMove = proxy(self.cropMove, self));\n      addListener(document, EVENT_POINTER_UP, self.onCropEnd = proxy(self.cropEnd, self));\n\n      if (options.responsive) {\n        addListener(window, EVENT_RESIZE, self.onResize = proxy(self.resize, self));\n      }\n    },\n    unbind: function unbind() {\n      var self = this;\n      var options = self.options;\n      var element = self.element;\n      var cropper = self.cropper;\n\n      if (isFunction(options.cropstart)) {\n        removeListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        removeListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        removeListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        removeListener(element, EVENT_CROP$1, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        removeListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      removeListener(cropper, EVENT_POINTER_DOWN, self.onCropStart);\n\n      if (options.zoomable && options.zoomOnWheel) {\n        removeListener(cropper, EVENT_WHEEL, self.onWheel);\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        removeListener(cropper, EVENT_DBLCLICK, self.onDblclick);\n      }\n\n      removeListener(document, EVENT_POINTER_MOVE, self.onCropMove);\n      removeListener(document, EVENT_POINTER_UP, self.onCropEnd);\n\n      if (options.responsive) {\n        removeListener(window, EVENT_RESIZE, self.onResize);\n      }\n    }\n  };\n  var REGEXP_ACTIONS = /^(e|w|s|n|se|sw|ne|nw|all|crop|move|zoom)$/;\n\n  function getPointer(_ref, endOnly) {\n    var pageX = _ref.pageX,\n        pageY = _ref.pageY;\n    var end = {\n      endX: pageX,\n      endY: pageY\n    };\n\n    if (endOnly) {\n      return end;\n    }\n\n    return extend({\n      startX: pageX,\n      startY: pageY\n    }, end);\n  }\n\n  var handlers = {\n    resize: function resize() {\n      var self = this;\n      var options = self.options;\n      var container = self.container;\n      var containerData = self.containerData;\n      var minContainerWidth = Number(options.minContainerWidth) || 200;\n      var minContainerHeight = Number(options.minContainerHeight) || 100;\n\n      if (self.disabled || containerData.width === minContainerWidth || containerData.height === minContainerHeight) {\n        return;\n      }\n\n      var ratio = container.offsetWidth / containerData.width; // Resize when width changed or height changed\n\n      if (ratio !== 1 || container.offsetHeight !== containerData.height) {\n        (function () {\n          var canvasData = void 0;\n          var cropBoxData = void 0;\n\n          if (options.restore) {\n            canvasData = self.getCanvasData();\n            cropBoxData = self.getCropBoxData();\n          }\n\n          self.render();\n\n          if (options.restore) {\n            self.setCanvasData(each(canvasData, function (n, i) {\n              canvasData[i] = n * ratio;\n            }));\n            self.setCropBoxData(each(cropBoxData, function (n, i) {\n              cropBoxData[i] = n * ratio;\n            }));\n          }\n        })();\n      }\n    },\n    dblclick: function dblclick() {\n      var self = this;\n\n      if (self.disabled || self.options.dragMode === 'none') {\n        return;\n      }\n\n      self.setDragMode(hasClass(self.dragBox, 'cropper-crop') ? 'move' : 'crop');\n    },\n    wheel: function wheel(event) {\n      var self = this;\n      var e = getEvent(event);\n      var ratio = Number(self.options.wheelZoomRatio) || 0.1;\n      var delta = 1;\n\n      if (self.disabled) {\n        return;\n      }\n\n      e.preventDefault(); // Limit wheel speed to prevent zoom too fast (#21)\n\n      if (self.wheeling) {\n        return;\n      }\n\n      self.wheeling = true;\n      setTimeout(function () {\n        self.wheeling = false;\n      }, 50);\n\n      if (e.deltaY) {\n        delta = e.deltaY > 0 ? 1 : -1;\n      } else if (e.wheelDelta) {\n        delta = -e.wheelDelta / 120;\n      } else if (e.detail) {\n        delta = e.detail > 0 ? 1 : -1;\n      }\n\n      self.zoom(-delta * ratio, e);\n    },\n    cropStart: function cropStart(event) {\n      var self = this;\n\n      if (self.disabled) {\n        return;\n      }\n\n      var options = self.options;\n      var pointers = self.pointers;\n      var e = getEvent(event);\n      var action = void 0;\n\n      if (e.changedTouches) {\n        // Handle touch event\n        each(e.changedTouches, function (touch) {\n          pointers[touch.identifier] = getPointer(touch);\n        });\n      } else {\n        // Handle mouse event and pointer event\n        pointers[e.pointerId || 0] = getPointer(e);\n      }\n\n      if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {\n        action = 'zoom';\n      } else {\n        action = getData$1(e.target, 'action');\n      }\n\n      if (!REGEXP_ACTIONS.test(action)) {\n        return;\n      }\n\n      if (dispatchEvent(self.element, 'cropstart', {\n        originalEvent: e,\n        action: action\n      }) === false) {\n        return;\n      }\n\n      e.preventDefault();\n      self.action = action;\n      self.cropping = false;\n\n      if (action === 'crop') {\n        self.cropping = true;\n        addClass(self.dragBox, 'cropper-modal');\n      }\n    },\n    cropMove: function cropMove(event) {\n      var self = this;\n      var action = self.action;\n\n      if (self.disabled || !action) {\n        return;\n      }\n\n      var pointers = self.pointers;\n      var e = getEvent(event);\n      e.preventDefault();\n\n      if (dispatchEvent(self.element, 'cropmove', {\n        originalEvent: e,\n        action: action\n      }) === false) {\n        return;\n      }\n\n      if (e.changedTouches) {\n        each(e.changedTouches, function (touch) {\n          extend(pointers[touch.identifier], getPointer(touch, true));\n        });\n      } else {\n        extend(pointers[e.pointerId || 0], getPointer(e, true));\n      }\n\n      self.change(e);\n    },\n    cropEnd: function cropEnd(event) {\n      var self = this;\n\n      if (self.disabled) {\n        return;\n      }\n\n      var action = self.action;\n      var pointers = self.pointers;\n      var e = getEvent(event);\n\n      if (e.changedTouches) {\n        each(e.changedTouches, function (touch) {\n          delete pointers[touch.identifier];\n        });\n      } else {\n        delete pointers[e.pointerId || 0];\n      }\n\n      if (!action) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (!Object.keys(pointers).length) {\n        self.action = '';\n      }\n\n      if (self.cropping) {\n        self.cropping = false;\n        toggleClass(self.dragBox, 'cropper-modal', self.cropped && this.options.modal);\n      }\n\n      dispatchEvent(self.element, 'cropend', {\n        originalEvent: e,\n        action: action\n      });\n    }\n  }; // Actions\n\n  var ACTION_EAST = 'e';\n  var ACTION_WEST = 'w';\n  var ACTION_SOUTH = 's';\n  var ACTION_NORTH = 'n';\n  var ACTION_SOUTH_EAST = 'se';\n  var ACTION_SOUTH_WEST = 'sw';\n  var ACTION_NORTH_EAST = 'ne';\n  var ACTION_NORTH_WEST = 'nw';\n\n  function getMaxZoomRatio(pointers) {\n    var pointers2 = extend({}, pointers);\n    var ratios = [];\n    each(pointers, function (pointer, pointerId) {\n      delete pointers2[pointerId];\n      each(pointers2, function (pointer2) {\n        var x1 = Math.abs(pointer.startX - pointer2.startX);\n        var y1 = Math.abs(pointer.startY - pointer2.startY);\n        var x2 = Math.abs(pointer.endX - pointer2.endX);\n        var y2 = Math.abs(pointer.endY - pointer2.endY);\n        var z1 = Math.sqrt(x1 * x1 + y1 * y1);\n        var z2 = Math.sqrt(x2 * x2 + y2 * y2);\n        var ratio = (z2 - z1) / z1;\n        ratios.push(ratio);\n      });\n    });\n    ratios.sort(function (a, b) {\n      return Math.abs(a) < Math.abs(b);\n    });\n    return ratios[0];\n  }\n\n  var change$1 = {\n    change: function change(e) {\n      var self = this;\n      var options = self.options;\n      var containerData = self.containerData;\n      var canvasData = self.canvasData;\n      var cropBoxData = self.cropBoxData;\n      var aspectRatio = options.aspectRatio;\n      var action = self.action;\n      var width = cropBoxData.width;\n      var height = cropBoxData.height;\n      var left = cropBoxData.left;\n      var top = cropBoxData.top;\n      var right = left + width;\n      var bottom = top + height;\n      var minLeft = 0;\n      var minTop = 0;\n      var maxWidth = containerData.width;\n      var maxHeight = containerData.height;\n      var renderable = true;\n      var offset = void 0; // Locking aspect ratio in \"free mode\" by holding shift key\n\n      if (!aspectRatio && e.shiftKey) {\n        aspectRatio = width && height ? width / height : 1;\n      }\n\n      if (self.limited) {\n        minLeft = cropBoxData.minLeft;\n        minTop = cropBoxData.minTop;\n        maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);\n        maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);\n      }\n\n      var pointers = self.pointers;\n      var pointer = pointers[Object.keys(pointers)[0]];\n      var range = {\n        x: pointer.endX - pointer.startX,\n        y: pointer.endY - pointer.startY\n      };\n\n      if (aspectRatio) {\n        range.X = range.y * aspectRatio;\n        range.Y = range.x / aspectRatio;\n      }\n\n      switch (action) {\n        // Move crop box\n        case 'all':\n          left += range.x;\n          top += range.y;\n          break;\n        // Resize crop box\n\n        case ACTION_EAST:\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          width += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top -= range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_WEST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH:\n          if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          height -= range.y;\n          top += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_SOUTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_WEST:\n          if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          width -= range.x;\n          left += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_EAST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH:\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          height += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left -= range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_NORTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_EAST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_WEST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n            left += range.X;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_WEST:\n          if (aspectRatio) {\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width -= range.x;\n            left += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_EAST:\n          if (aspectRatio) {\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n          }\n\n          break;\n        // Move canvas\n\n        case 'move':\n          self.move(range.x, range.y);\n          renderable = false;\n          break;\n        // Zoom canvas\n\n        case 'zoom':\n          self.zoom(getMaxZoomRatio(pointers), e);\n          renderable = false;\n          break;\n        // Create crop box\n\n        case 'crop':\n          if (!range.x || !range.y) {\n            renderable = false;\n            break;\n          }\n\n          offset = getOffset(self.cropper);\n          left = pointer.startX - offset.left;\n          top = pointer.startY - offset.top;\n          width = cropBoxData.minWidth;\n          height = cropBoxData.minHeight;\n\n          if (range.x > 0) {\n            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n          } else if (range.x < 0) {\n            left -= width;\n            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n          }\n\n          if (range.y < 0) {\n            top -= height;\n          } // Show the crop box if is hidden\n\n\n          if (!self.cropped) {\n            removeClass(self.cropBox, 'cropper-hidden');\n            self.cropped = true;\n\n            if (self.limited) {\n              self.limitCropBox(true, true);\n            }\n          }\n\n          break;\n        // No default\n      }\n\n      if (renderable) {\n        cropBoxData.width = width;\n        cropBoxData.height = height;\n        cropBoxData.left = left;\n        cropBoxData.top = top;\n        self.action = action;\n        self.renderCropBox();\n      } // Override\n\n\n      each(pointers, function (p) {\n        p.startX = p.endX;\n        p.startY = p.endY;\n      });\n    }\n  };\n\n  function getPointersCenter(pointers) {\n    var pageX = 0;\n    var pageY = 0;\n    var count = 0;\n    each(pointers, function (_ref) {\n      var startX = _ref.startX,\n          startY = _ref.startY;\n      pageX += startX;\n      pageY += startY;\n      count += 1;\n    });\n    pageX /= count;\n    pageY /= count;\n    return {\n      pageX: pageX,\n      pageY: pageY\n    };\n  }\n\n  var methods = {\n    // Show the crop box manually\n    crop: function crop() {\n      var self = this;\n\n      if (self.ready && !self.disabled) {\n        if (!self.cropped) {\n          self.cropped = true;\n          self.limitCropBox(true, true);\n\n          if (self.options.modal) {\n            addClass(self.dragBox, 'cropper-modal');\n          }\n\n          removeClass(self.cropBox, 'cropper-hidden');\n        }\n\n        self.setCropBoxData(self.initialCropBoxData);\n      }\n\n      return self;\n    },\n    // Reset the image and crop box to their initial states\n    reset: function reset() {\n      var self = this;\n\n      if (self.ready && !self.disabled) {\n        self.imageData = extend({}, self.initialImageData);\n        self.canvasData = extend({}, self.initialCanvasData);\n        self.cropBoxData = extend({}, self.initialCropBoxData);\n        self.renderCanvas();\n\n        if (self.cropped) {\n          self.renderCropBox();\n        }\n      }\n\n      return self;\n    },\n    // Clear the crop box\n    clear: function clear() {\n      var self = this;\n\n      if (self.cropped && !self.disabled) {\n        extend(self.cropBoxData, {\n          left: 0,\n          top: 0,\n          width: 0,\n          height: 0\n        });\n        self.cropped = false;\n        self.renderCropBox();\n        self.limitCanvas(); // Render canvas after crop box rendered\n\n        self.renderCanvas();\n        removeClass(self.dragBox, 'cropper-modal');\n        addClass(self.cropBox, 'cropper-hidden');\n      }\n\n      return self;\n    },\n\n    /**\n     * Replace the image's src and rebuild the cropper\n     *\n     * @param {String} url\n     * @param {Boolean} onlyColorChanged (optional)\n     */\n    replace: function replace(url, onlyColorChanged) {\n      var self = this;\n\n      if (!self.disabled && url) {\n        if (self.isImg) {\n          self.element.src = url;\n        }\n\n        if (onlyColorChanged) {\n          self.url = url;\n          self.image.src = url;\n\n          if (self.ready) {\n            self.image2.src = url;\n            each(self.previews, function (element) {\n              getByTag(element, 'img')[0].src = url;\n            });\n          }\n        } else {\n          if (self.isImg) {\n            self.replaced = true;\n          } // Clear previous data\n\n\n          self.options.data = null;\n          self.load(url);\n        }\n      }\n\n      return self;\n    },\n    // Enable (unfreeze) the cropper\n    enable: function enable() {\n      var self = this;\n\n      if (self.ready) {\n        self.disabled = false;\n        removeClass(self.cropper, 'cropper-disabled');\n      }\n\n      return self;\n    },\n    // Disable (freeze) the cropper\n    disable: function disable() {\n      var self = this;\n\n      if (self.ready) {\n        self.disabled = true;\n        addClass(self.cropper, 'cropper-disabled');\n      }\n\n      return self;\n    },\n    // Destroy the cropper and remove the instance from the image\n    destroy: function destroy() {\n      var self = this;\n      var element = self.element;\n      var image = self.image;\n\n      if (self.loaded) {\n        if (self.isImg && self.replaced) {\n          element.src = self.originalUrl;\n        }\n\n        self.unbuild();\n        removeClass(element, 'cropper-hidden');\n      } else if (self.isImg) {\n        removeListener(element, 'load', self.onStart);\n      } else if (image) {\n        removeChild(image);\n      }\n\n      removeData(element, 'cropper');\n      return self;\n    },\n\n    /**\n     * Move the canvas with relative offsets\n     *\n     * @param {Number} offsetX\n     * @param {Number} offsetY (optional)\n     */\n    move: function move(offsetX, offsetY) {\n      var self = this;\n      var canvasData = self.canvasData;\n      return self.moveTo(isUndefined(offsetX) ? offsetX : canvasData.left + Number(offsetX), isUndefined(offsetY) ? offsetY : canvasData.top + Number(offsetY));\n    },\n\n    /**\n     * Move the canvas to an absolute point\n     *\n     * @param {Number} x\n     * @param {Number} y (optional)\n     */\n    moveTo: function moveTo(x, y) {\n      var self = this;\n      var canvasData = self.canvasData;\n      var changed = false; // If \"y\" is not present, its default value is \"x\"\n\n      if (isUndefined(y)) {\n        y = x;\n      }\n\n      x = Number(x);\n      y = Number(y);\n\n      if (self.ready && !self.disabled && self.options.movable) {\n        if (isNumber(x)) {\n          canvasData.left = x;\n          changed = true;\n        }\n\n        if (isNumber(y)) {\n          canvasData.top = y;\n          changed = true;\n        }\n\n        if (changed) {\n          self.renderCanvas(true);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Zoom the canvas with a relative ratio\n     *\n     * @param {Number} ratio\n     * @param {Event} _originalEvent (private)\n     */\n    zoom: function zoom(ratio, _originalEvent) {\n      var self = this;\n      var canvasData = self.canvasData;\n      ratio = Number(ratio);\n\n      if (ratio < 0) {\n        ratio = 1 / (1 - ratio);\n      } else {\n        ratio = 1 + ratio;\n      }\n\n      return self.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, _originalEvent);\n    },\n\n    /**\n     * Zoom the canvas to an absolute ratio\n     *\n     * @param {Number} ratio\n     * @param {Event} _originalEvent (private)\n     */\n    zoomTo: function zoomTo(ratio, _originalEvent) {\n      var self = this;\n      var options = self.options;\n      var canvasData = self.canvasData;\n      var width = canvasData.width;\n      var height = canvasData.height;\n      var naturalWidth = canvasData.naturalWidth;\n      var naturalHeight = canvasData.naturalHeight;\n      ratio = Number(ratio);\n\n      if (ratio >= 0 && self.ready && !self.disabled && options.zoomable) {\n        var newWidth = naturalWidth * ratio;\n        var newHeight = naturalHeight * ratio;\n\n        if (dispatchEvent(self.element, 'zoom', {\n          originalEvent: _originalEvent,\n          oldRatio: width / naturalWidth,\n          ratio: newWidth / naturalWidth\n        }) === false) {\n          return self;\n        }\n\n        if (_originalEvent) {\n          var pointers = self.pointers;\n          var offset = getOffset(self.cropper);\n          var center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {\n            pageX: _originalEvent.pageX,\n            pageY: _originalEvent.pageY\n          }; // Zoom from the triggering point of the event\n\n          canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\n        } else {\n          // Zoom from the center of the canvas\n          canvasData.left -= (newWidth - width) / 2;\n          canvasData.top -= (newHeight - height) / 2;\n        }\n\n        canvasData.width = newWidth;\n        canvasData.height = newHeight;\n        self.renderCanvas(true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Rotate the canvas with a relative degree\n     *\n     * @param {Number} degree\n     */\n    rotate: function rotate(degree) {\n      var self = this;\n      return self.rotateTo((self.imageData.rotate || 0) + Number(degree));\n    },\n\n    /**\n     * Rotate the canvas to an absolute degree\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate()\n     *\n     * @param {Number} degree\n     */\n    rotateTo: function rotateTo(degree) {\n      var self = this;\n      degree = Number(degree);\n\n      if (isNumber(degree) && self.ready && !self.disabled && self.options.rotatable) {\n        self.imageData.rotate = degree % 360;\n        self.rotated = true;\n        self.renderCanvas(true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Scale the image\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()\n     *\n     * @param {Number} scaleX\n     * @param {Number} scaleY (optional)\n     */\n    scale: function scale(scaleX, scaleY) {\n      var self = this;\n      var imageData = self.imageData;\n      var changed = false; // If \"scaleY\" is not present, its default value is \"scaleX\"\n\n      if (isUndefined(scaleY)) {\n        scaleY = scaleX;\n      }\n\n      scaleX = Number(scaleX);\n      scaleY = Number(scaleY);\n\n      if (self.ready && !self.disabled && self.options.scalable) {\n        if (isNumber(scaleX)) {\n          imageData.scaleX = scaleX;\n          changed = true;\n        }\n\n        if (isNumber(scaleY)) {\n          imageData.scaleY = scaleY;\n          changed = true;\n        }\n\n        if (changed) {\n          self.renderImage(true);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Scale the abscissa of the image\n     *\n     * @param {Number} scaleX\n     */\n    scaleX: function scaleX(_scaleX) {\n      var self = this;\n      var scaleY = self.imageData.scaleY;\n      return self.scale(_scaleX, isNumber(scaleY) ? scaleY : 1);\n    },\n\n    /**\n     * Scale the ordinate of the image\n     *\n     * @param {Number} scaleY\n     */\n    scaleY: function scaleY(_scaleY) {\n      var self = this;\n      var scaleX = self.imageData.scaleX;\n      return self.scale(isNumber(scaleX) ? scaleX : 1, _scaleY);\n    },\n\n    /**\n     * Get the cropped area position and size data (base on the original image)\n     *\n     * @param {Boolean} rounded (optional)\n     * @return {Object} data\n     */\n    getData: function getData(rounded) {\n      var self = this;\n      var options = self.options;\n      var imageData = self.imageData;\n      var canvasData = self.canvasData;\n      var cropBoxData = self.cropBoxData;\n      var ratio = void 0;\n      var data = void 0;\n\n      if (self.ready && self.cropped) {\n        data = {\n          x: cropBoxData.left - canvasData.left,\n          y: cropBoxData.top - canvasData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n        ratio = imageData.width / imageData.naturalWidth;\n        each(data, function (n, i) {\n          n /= ratio;\n          data[i] = rounded ? Math.round(n) : n;\n        });\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      if (options.rotatable) {\n        data.rotate = imageData.rotate || 0;\n      }\n\n      if (options.scalable) {\n        data.scaleX = imageData.scaleX || 1;\n        data.scaleY = imageData.scaleY || 1;\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the cropped area position and size with new data\n     *\n     * @param {Object} data\n     */\n    setData: function setData(data) {\n      var self = this;\n      var options = self.options;\n      var imageData = self.imageData;\n      var canvasData = self.canvasData;\n      var cropBoxData = {};\n      var rotated = void 0;\n      var scaled = void 0;\n      var ratio = void 0;\n\n      if (isFunction(data)) {\n        data = data.call(self.element);\n      }\n\n      if (self.ready && !self.disabled && isPlainObject(data)) {\n        if (options.rotatable) {\n          if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n            imageData.rotate = data.rotate;\n            self.rotated = rotated = true;\n          }\n        }\n\n        if (options.scalable) {\n          if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n            imageData.scaleX = data.scaleX;\n            scaled = true;\n          }\n\n          if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n            imageData.scaleY = data.scaleY;\n            scaled = true;\n          }\n        }\n\n        if (rotated) {\n          self.renderCanvas();\n        } else if (scaled) {\n          self.renderImage();\n        }\n\n        ratio = imageData.width / imageData.naturalWidth;\n\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvasData.left;\n        }\n\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvasData.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n\n        self.setCropBoxData(cropBoxData);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get the container size data\n     *\n     * @return {Object} data\n     */\n    getContainerData: function getContainerData() {\n      var self = this;\n      return self.ready ? self.containerData : {};\n    },\n\n    /**\n     * Get the image position and size data\n     *\n     * @return {Object} data\n     */\n    getImageData: function getImageData() {\n      var self = this;\n      return self.loaded ? self.imageData : {};\n    },\n\n    /**\n     * Get the canvas position and size data\n     *\n     * @return {Object} data\n     */\n    getCanvasData: function getCanvasData() {\n      var self = this;\n      var canvasData = self.canvasData;\n      var data = {};\n\n      if (self.ready) {\n        each(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {\n          data[n] = canvasData[n];\n        });\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the canvas position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCanvasData: function setCanvasData(data) {\n      var self = this;\n      var canvasData = self.canvasData;\n      var aspectRatio = canvasData.aspectRatio;\n\n      if (isFunction(data)) {\n        data = data.call(self.element);\n      }\n\n      if (self.ready && !self.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvasData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          canvasData.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          canvasData.width = data.width;\n          canvasData.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvasData.height = data.height;\n          canvasData.width = data.height * aspectRatio;\n        }\n\n        self.renderCanvas(true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get the crop box position and size data\n     *\n     * @return {Object} data\n     */\n    getCropBoxData: function getCropBoxData() {\n      var self = this;\n      var cropBoxData = self.cropBoxData;\n      var data = void 0;\n\n      if (self.ready && self.cropped) {\n        data = {\n          left: cropBoxData.left,\n          top: cropBoxData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n      }\n\n      return data || {};\n    },\n\n    /**\n     * Set the crop box position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCropBoxData: function setCropBoxData(data) {\n      var self = this;\n      var cropBoxData = self.cropBoxData;\n      var aspectRatio = self.options.aspectRatio;\n      var widthChanged = void 0;\n      var heightChanged = void 0;\n\n      if (isFunction(data)) {\n        data = data.call(self.element);\n      }\n\n      if (self.ready && self.cropped && !self.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          cropBoxData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          cropBoxData.top = data.top;\n        }\n\n        if (isNumber(data.width) && data.width !== cropBoxData.width) {\n          widthChanged = true;\n          cropBoxData.width = data.width;\n        }\n\n        if (isNumber(data.height) && data.height !== cropBoxData.height) {\n          heightChanged = true;\n          cropBoxData.height = data.height;\n        }\n\n        if (aspectRatio) {\n          if (widthChanged) {\n            cropBoxData.height = cropBoxData.width / aspectRatio;\n          } else if (heightChanged) {\n            cropBoxData.width = cropBoxData.height * aspectRatio;\n          }\n        }\n\n        self.renderCropBox();\n      }\n\n      return self;\n    },\n\n    /**\n     * Get a canvas drawn the cropped image\n     *\n     * @param {Object} options (optional)\n     * @return {HTMLCanvasElement} canvas\n     */\n    getCroppedCanvas: function getCroppedCanvas(options) {\n      var self = this;\n\n      if (!self.ready || !window.HTMLCanvasElement) {\n        return null;\n      }\n\n      if (!isPlainObject(options)) {\n        options = {};\n      } // Return the whole canvas if not cropped\n\n\n      if (!self.cropped) {\n        return getSourceCanvas(self.image, self.imageData, options);\n      }\n\n      var data = self.getData();\n      var originalWidth = data.width;\n      var originalHeight = data.height;\n      var aspectRatio = originalWidth / originalHeight;\n      var scaledWidth = void 0;\n      var scaledHeight = void 0;\n      var scaledRatio = void 0;\n\n      if (isPlainObject(options)) {\n        scaledWidth = options.width;\n        scaledHeight = options.height;\n\n        if (scaledWidth) {\n          scaledHeight = scaledWidth / aspectRatio;\n          scaledRatio = scaledWidth / originalWidth;\n        } else if (scaledHeight) {\n          scaledWidth = scaledHeight * aspectRatio;\n          scaledRatio = scaledHeight / originalHeight;\n        }\n      } // The canvas element will use `Math.floor` on a float number, so floor first\n\n\n      var canvasWidth = Math.floor(scaledWidth || originalWidth);\n      var canvasHeight = Math.floor(scaledHeight || originalHeight);\n      var canvas = createElement('canvas');\n      var context = canvas.getContext('2d');\n      canvas.width = canvasWidth;\n      canvas.height = canvasHeight;\n\n      if (options.fillColor) {\n        context.fillStyle = options.fillColor;\n        context.fillRect(0, 0, canvasWidth, canvasHeight);\n      } // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n\n\n      var parameters = function () {\n        var source = getSourceCanvas(self.image, self.imageData, options);\n        var sourceWidth = source.width;\n        var sourceHeight = source.height;\n        var canvasData = self.canvasData;\n        var params = [source]; // Source canvas\n\n        var srcX = data.x + canvasData.naturalWidth * (Math.abs(data.scaleX || 1) - 1) / 2;\n        var srcY = data.y + canvasData.naturalHeight * (Math.abs(data.scaleY || 1) - 1) / 2;\n        var srcWidth = void 0;\n        var srcHeight = void 0; // Destination canvas\n\n        var dstX = void 0;\n        var dstY = void 0;\n        var dstWidth = void 0;\n        var dstHeight = void 0;\n\n        if (srcX <= -originalWidth || srcX > sourceWidth) {\n          srcX = srcWidth = dstX = dstWidth = 0;\n        } else if (srcX <= 0) {\n          dstX = -srcX;\n          srcX = 0;\n          srcWidth = dstWidth = Math.min(sourceWidth, originalWidth + srcX);\n        } else if (srcX <= sourceWidth) {\n          dstX = 0;\n          srcWidth = dstWidth = Math.min(originalWidth, sourceWidth - srcX);\n        }\n\n        if (srcWidth <= 0 || srcY <= -originalHeight || srcY > sourceHeight) {\n          srcY = srcHeight = dstY = dstHeight = 0;\n        } else if (srcY <= 0) {\n          dstY = -srcY;\n          srcY = 0;\n          srcHeight = dstHeight = Math.min(sourceHeight, originalHeight + srcY);\n        } else if (srcY <= sourceHeight) {\n          dstY = 0;\n          srcHeight = dstHeight = Math.min(originalHeight, sourceHeight - srcY);\n        }\n\n        params.push(Math.floor(srcX), Math.floor(srcY), Math.floor(srcWidth), Math.floor(srcHeight)); // Scale destination sizes\n\n        if (scaledRatio) {\n          dstX *= scaledRatio;\n          dstY *= scaledRatio;\n          dstWidth *= scaledRatio;\n          dstHeight *= scaledRatio;\n        } // Avoid \"IndexSizeError\" in IE and Firefox\n\n\n        if (dstWidth > 0 && dstHeight > 0) {\n          params.push(Math.floor(dstX), Math.floor(dstY), Math.floor(dstWidth), Math.floor(dstHeight));\n        }\n\n        return params;\n      }();\n\n      context.imageSmoothingEnabled = !!options.imageSmoothingEnabled;\n\n      if (options.imageSmoothingQuality) {\n        context.imageSmoothingQuality = options.imageSmoothingQuality;\n      }\n\n      context.drawImage.apply(context, toConsumableArray(parameters));\n      return canvas;\n    },\n\n    /**\n     * Change the aspect ratio of the crop box\n     *\n     * @param {Number} aspectRatio\n     */\n    setAspectRatio: function setAspectRatio(aspectRatio) {\n      var self = this;\n      var options = self.options;\n\n      if (!self.disabled && !isUndefined(aspectRatio)) {\n        // 0 -> NaN\n        options.aspectRatio = Math.max(0, aspectRatio) || NaN;\n\n        if (self.ready) {\n          self.initCropBox();\n\n          if (self.cropped) {\n            self.renderCropBox();\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Change the drag mode\n     *\n     * @param {String} mode (optional)\n     */\n    setDragMode: function setDragMode(mode) {\n      var self = this;\n      var options = self.options;\n      var dragBox = self.dragBox;\n      var face = self.face;\n      var croppable = void 0;\n      var movable = void 0;\n\n      if (self.loaded && !self.disabled) {\n        croppable = mode === 'crop';\n        movable = options.movable && mode === 'move';\n        mode = croppable || movable ? mode : 'none';\n        setData$1(dragBox, 'action', mode);\n        toggleClass(dragBox, 'cropper-crop', croppable);\n        toggleClass(dragBox, 'cropper-move', movable);\n\n        if (!options.cropBoxMovable) {\n          // Sync drag mode to crop box when it is not movable\n          setData$1(face, 'action', mode);\n          toggleClass(face, 'cropper-crop', croppable);\n          toggleClass(face, 'cropper-move', movable);\n        }\n      }\n\n      return self;\n    }\n  }; // Constants\n\n  var NAMESPACE = 'cropper'; // Classes\n\n  var CLASS_HIDDEN = NAMESPACE + '-hidden'; // Events\n\n  var EVENT_ERROR = 'error';\n  var EVENT_LOAD = 'load';\n  var EVENT_READY = 'ready';\n  var EVENT_CROP = 'crop'; // RegExps\n\n  var REGEXP_DATA_URL = /^data:/;\n  var REGEXP_DATA_URL_JPEG = /^data:image\\/jpeg;base64,/;\n  var AnotherCropper = void 0;\n\n  var Cropper = function () {\n    function Cropper(element, options) {\n      classCallCheck(this, Cropper);\n      var self = this;\n      self.element = element;\n      self.options = extend({}, DEFAULTS, isPlainObject(options) && options);\n      self.loaded = false;\n      self.ready = false;\n      self.complete = false;\n      self.rotated = false;\n      self.cropped = false;\n      self.disabled = false;\n      self.replaced = false;\n      self.limited = false;\n      self.wheeling = false;\n      self.isImg = false;\n      self.originalUrl = '';\n      self.canvasData = null;\n      self.cropBoxData = null;\n      self.previews = null;\n      self.pointers = {};\n      self.init();\n    }\n\n    createClass(Cropper, [{\n      key: 'init',\n      value: function init() {\n        var self = this;\n        var element = self.element;\n        var tagName = element.tagName.toLowerCase();\n        var url = void 0;\n\n        if (getData$1(element, NAMESPACE)) {\n          return;\n        }\n\n        setData$1(element, NAMESPACE, self);\n\n        if (tagName === 'img') {\n          self.isImg = true; // e.g.: \"img/picture.jpg\"\n\n          self.originalUrl = url = element.getAttribute('src'); // Stop when it's a blank image\n\n          if (!url) {\n            return;\n          } // e.g.: \"http://example.com/img/picture.jpg\"\n\n\n          url = element.src;\n        } else if (tagName === 'canvas' && window.HTMLCanvasElement) {\n          url = element.toDataURL();\n        }\n\n        self.load(url);\n      }\n    }, {\n      key: 'load',\n      value: function load(url) {\n        var self = this;\n        var options = self.options;\n        var element = self.element;\n\n        if (!url) {\n          return;\n        }\n\n        self.url = url;\n        self.imageData = {};\n\n        if (!options.checkOrientation || !window.ArrayBuffer) {\n          self.clone();\n          return;\n        } // XMLHttpRequest disallows to open a Data URL in some browsers like IE11 and Safari\n\n\n        if (REGEXP_DATA_URL.test(url)) {\n          if (REGEXP_DATA_URL_JPEG.test(url)) {\n            self.read(dataURLToArrayBuffer(url));\n          } else {\n            self.clone();\n          }\n\n          return;\n        }\n\n        var xhr = new XMLHttpRequest();\n\n        xhr.onerror = xhr.onabort = function () {\n          self.clone();\n        };\n\n        xhr.onload = function () {\n          self.read(xhr.response);\n        };\n\n        if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {\n          url = addTimestamp(url);\n        }\n\n        xhr.open('get', url);\n        xhr.responseType = 'arraybuffer';\n        xhr.withCredentials = element.crossOrigin === 'use-credentials';\n        xhr.send();\n      }\n    }, {\n      key: 'read',\n      value: function read(arrayBuffer) {\n        var self = this;\n        var options = self.options;\n        var orientation = getOrientation(arrayBuffer);\n        var imageData = self.imageData;\n        var rotate = 0;\n        var scaleX = 1;\n        var scaleY = 1;\n\n        if (orientation > 1) {\n          self.url = arrayBufferToDataURL(arrayBuffer);\n\n          switch (orientation) {\n            // flip horizontal\n            case 2:\n              scaleX = -1;\n              break;\n            // rotate left 180°\n\n            case 3:\n              rotate = -180;\n              break;\n            // flip vertical\n\n            case 4:\n              scaleY = -1;\n              break;\n            // flip vertical + rotate right 90°\n\n            case 5:\n              rotate = 90;\n              scaleY = -1;\n              break;\n            // rotate right 90°\n\n            case 6:\n              rotate = 90;\n              break;\n            // flip horizontal + rotate right 90°\n\n            case 7:\n              rotate = 90;\n              scaleX = -1;\n              break;\n            // rotate left 90°\n\n            case 8:\n              rotate = -90;\n              break;\n          }\n        }\n\n        if (options.rotatable) {\n          imageData.rotate = rotate;\n        }\n\n        if (options.scalable) {\n          imageData.scaleX = scaleX;\n          imageData.scaleY = scaleY;\n        }\n\n        self.clone();\n      }\n    }, {\n      key: 'clone',\n      value: function clone() {\n        var self = this;\n        var element = self.element;\n        var url = self.url;\n        var crossOrigin = void 0;\n        var crossOriginUrl = void 0;\n        var start = void 0;\n        var stop = void 0;\n\n        if (self.options.checkCrossOrigin && isCrossOriginURL(url)) {\n          crossOrigin = element.crossOrigin;\n\n          if (crossOrigin) {\n            crossOriginUrl = url;\n          } else {\n            crossOrigin = 'anonymous'; // Bust cache when there is not a \"crossOrigin\" property\n\n            crossOriginUrl = addTimestamp(url);\n          }\n        }\n\n        self.crossOrigin = crossOrigin;\n        self.crossOriginUrl = crossOriginUrl;\n        var image = createElement('img');\n\n        if (crossOrigin) {\n          image.crossOrigin = crossOrigin;\n        }\n\n        image.src = crossOriginUrl || url;\n        self.image = image;\n        self.onStart = start = proxy(self.start, self);\n        self.onStop = stop = proxy(self.stop, self);\n\n        if (self.isImg) {\n          if (element.complete) {\n            self.start();\n          } else {\n            addListener(element, EVENT_LOAD, start);\n          }\n        } else {\n          addListener(image, EVENT_LOAD, start);\n          addListener(image, EVENT_ERROR, stop);\n          addClass(image, 'cropper-hide');\n          element.parentNode.insertBefore(image, element.nextSibling);\n        }\n      }\n    }, {\n      key: 'start',\n      value: function start(event) {\n        var self = this;\n        var image = self.isImg ? self.element : self.image;\n\n        if (event) {\n          removeListener(image, EVENT_LOAD, self.onStart);\n          removeListener(image, EVENT_ERROR, self.onStop);\n        }\n\n        getImageSize(image, function (naturalWidth, naturalHeight) {\n          extend(self.imageData, {\n            naturalWidth: naturalWidth,\n            naturalHeight: naturalHeight,\n            aspectRatio: naturalWidth / naturalHeight\n          });\n          self.loaded = true;\n          self.build();\n        });\n      }\n    }, {\n      key: 'stop',\n      value: function stop() {\n        var self = this;\n        var image = self.image;\n        removeListener(image, EVENT_LOAD, self.onStart);\n        removeListener(image, EVENT_ERROR, self.onStop);\n        removeChild(image);\n        self.image = null;\n      }\n    }, {\n      key: 'build',\n      value: function build() {\n        var self = this;\n        var options = self.options;\n        var element = self.element;\n        var image = self.image;\n        var container = void 0;\n        var cropper = void 0;\n        var canvas = void 0;\n        var dragBox = void 0;\n        var cropBox = void 0;\n        var face = void 0;\n\n        if (!self.loaded) {\n          return;\n        } // Unbuild first when replace\n\n\n        if (self.ready) {\n          self.unbuild();\n        }\n\n        var template = createElement('div');\n        template.innerHTML = TEMPLATE; // Create cropper elements\n\n        self.container = container = element.parentNode;\n        self.cropper = cropper = getByClass(template, 'cropper-container')[0];\n        self.canvas = canvas = getByClass(cropper, 'cropper-canvas')[0];\n        self.dragBox = dragBox = getByClass(cropper, 'cropper-drag-box')[0];\n        self.cropBox = cropBox = getByClass(cropper, 'cropper-crop-box')[0];\n        self.viewBox = getByClass(cropper, 'cropper-view-box')[0];\n        self.face = face = getByClass(cropBox, 'cropper-face')[0];\n        appendChild(canvas, image); // Hide the original image\n\n        addClass(element, CLASS_HIDDEN); // Inserts the cropper after to the current image\n\n        container.insertBefore(cropper, element.nextSibling); // Show the image if is hidden\n\n        if (!self.isImg) {\n          removeClass(image, 'cropper-hide');\n        }\n\n        self.initPreview();\n        self.bind();\n        options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;\n        options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;\n        self.cropped = options.autoCrop;\n\n        if (options.autoCrop) {\n          if (options.modal) {\n            addClass(dragBox, 'cropper-modal');\n          }\n        } else {\n          addClass(cropBox, CLASS_HIDDEN);\n        }\n\n        if (!options.guides) {\n          addClass(getByClass(cropBox, 'cropper-dashed'), CLASS_HIDDEN);\n        }\n\n        if (!options.center) {\n          addClass(getByClass(cropBox, 'cropper-center'), CLASS_HIDDEN);\n        }\n\n        if (options.background) {\n          addClass(cropper, 'cropper-bg');\n        }\n\n        if (!options.highlight) {\n          addClass(face, 'cropper-invisible');\n        }\n\n        if (options.cropBoxMovable) {\n          addClass(face, 'cropper-move');\n          setData$1(face, 'action', 'all');\n        }\n\n        if (!options.cropBoxResizable) {\n          addClass(getByClass(cropBox, 'cropper-line'), CLASS_HIDDEN);\n          addClass(getByClass(cropBox, 'cropper-point'), CLASS_HIDDEN);\n        }\n\n        self.setDragMode(options.dragMode);\n        self.render();\n        self.ready = true;\n        self.setData(options.data); // Call the \"ready\" option asynchronously to keep \"image.cropper\" is defined\n\n        self.completing = setTimeout(function () {\n          if (isFunction(options.ready)) {\n            addListener(element, EVENT_READY, options.ready, true);\n          }\n\n          dispatchEvent(element, EVENT_READY);\n          dispatchEvent(element, EVENT_CROP, self.getData());\n          self.complete = true;\n        }, 0);\n      }\n    }, {\n      key: 'unbuild',\n      value: function unbuild() {\n        var self = this;\n\n        if (!self.ready) {\n          return;\n        }\n\n        if (!self.complete) {\n          clearTimeout(self.completing);\n        }\n\n        self.ready = false;\n        self.complete = false;\n        self.initialImageData = null; // Clear `initialCanvasData` is necessary when replace\n\n        self.initialCanvasData = null;\n        self.initialCropBoxData = null;\n        self.containerData = null;\n        self.canvasData = null; // Clear `cropBoxData` is necessary when replace\n\n        self.cropBoxData = null;\n        self.unbind();\n        self.resetPreview();\n        self.previews = null;\n        self.viewBox = null;\n        self.cropBox = null;\n        self.dragBox = null;\n        self.canvas = null;\n        self.container = null;\n        removeChild(self.cropper);\n        self.cropper = null;\n      }\n    }], [{\n      key: 'noConflict',\n      value: function noConflict() {\n        window.Cropper = AnotherCropper;\n        return Cropper;\n      }\n    }, {\n      key: 'setDefaults',\n      value: function setDefaults(options) {\n        extend(DEFAULTS, isPlainObject(options) && options);\n      }\n    }]);\n    return Cropper;\n  }();\n\n  extend(Cropper.prototype, render$1);\n  extend(Cropper.prototype, preview$1);\n  extend(Cropper.prototype, events);\n  extend(Cropper.prototype, handlers);\n  extend(Cropper.prototype, change$1);\n  extend(Cropper.prototype, methods);\n\n  if (typeof window !== 'undefined') {\n    AnotherCropper = window.Cropper;\n    window.Cropper = Cropper;\n  }\n\n  return Cropper;\n});"],"sourceRoot":""}